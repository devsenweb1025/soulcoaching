/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/calendar/calendar.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/calendar/calendar.js ***!
  \*******************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTAppCalendar = function () {\n  // Shared variables\n  // Calendar variables\n  var calendar;\n  var data = {\n    id: '',\n    eventName: '',\n    eventDescription: '',\n    eventLocation: '',\n    startDate: '',\n    endDate: '',\n    allDay: false\n  };\n\n  // Add event variables\n  var eventName;\n  var eventDescription;\n  var eventLocation;\n  var startDatepicker;\n  var startFlatpickr;\n  var endDatepicker;\n  var endFlatpickr;\n  var startTimepicker;\n  var startTimeFlatpickr;\n  var endTimepicker;\n  var endTimeFlatpickr;\n  var modal;\n  var modalTitle;\n  var form;\n  var validator;\n  var addButton;\n  var submitButton;\n  var cancelButton;\n  var closeButton;\n\n  // View event variables\n  var viewEventName;\n  var viewAllDay;\n  var viewEventDescription;\n  var viewEventLocation;\n  var viewStartDate;\n  var viewEndDate;\n  var viewModal;\n  var viewEditButton;\n  var viewDeleteButton;\n\n  // Private functions\n  var initCalendarApp = function initCalendarApp() {\n    // Define variables\n    var calendarEl = document.getElementById('kt_calendar_app');\n    var todayDate = moment().startOf('day');\n    var YM = todayDate.format('YYYY-MM');\n    var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');\n    var TODAY = todayDate.format('YYYY-MM-DD');\n    var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD');\n\n    // Init calendar --- more info: https://fullcalendar.io/docs/initialize-globals\n    calendar = new FullCalendar.Calendar(calendarEl, {\n      //locale: 'es', // Set local --- more info: https://fullcalendar.io/docs/locale\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialDate: TODAY,\n      navLinks: true,\n      // can click day/week names to navigate views\n      selectable: true,\n      selectMirror: true,\n      // Select dates action --- more info: https://fullcalendar.io/docs/select-callback\n      select: function select(arg) {\n        formatArgs(arg);\n        handleNewEvent();\n      },\n      // Click event --- more info: https://fullcalendar.io/docs/eventClick\n      eventClick: function eventClick(arg) {\n        formatArgs({\n          id: arg.event.id,\n          title: arg.event.title,\n          description: arg.event.extendedProps.description,\n          location: arg.event.extendedProps.location,\n          startStr: arg.event.startStr,\n          endStr: arg.event.endStr,\n          allDay: arg.event.allDay\n        });\n        handleViewEvent();\n      },\n      editable: true,\n      dayMaxEvents: true,\n      // allow \"more\" link when too many events\n      events: [{\n        id: uid(),\n        title: 'All Day Event',\n        start: YM + '-01',\n        end: YM + '-02',\n        description: 'Toto lorem ipsum dolor sit incid idunt ut',\n        className: \"fc-event-danger fc-event-solid-warning\",\n        location: 'Federation Square'\n      }, {\n        id: uid(),\n        title: 'Reporting',\n        start: YM + '-14T13:30:00',\n        description: 'Lorem ipsum dolor incid idunt ut labore',\n        end: YM + '-14T14:30:00',\n        className: \"fc-event-success\",\n        location: 'Meeting Room 7.03'\n      }, {\n        id: uid(),\n        title: 'Company Trip',\n        start: YM + '-02',\n        description: 'Lorem ipsum dolor sit tempor incid',\n        end: YM + '-03',\n        className: \"fc-event-primary\",\n        location: 'Seoul, Korea'\n      }, {\n        id: uid(),\n        title: 'ICT Expo 2021 - Product Release',\n        start: YM + '-03',\n        description: 'Lorem ipsum dolor sit tempor inci',\n        end: YM + '-05',\n        className: \"fc-event-light fc-event-solid-primary\",\n        location: 'Melbourne Exhibition Hall'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: YM + '-12',\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        end: YM + '-13',\n        location: 'Squire\\'s Loft'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        start: YM + '-09T16:00:00',\n        end: YM + '-09T17:00:00',\n        description: 'Lorem ipsum dolor sit ncididunt ut labore',\n        className: \"fc-event-danger\",\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Repeating Event',\n        description: 'Lorem ipsum dolor sit amet, labore',\n        start: YM + '-16T16:00:00',\n        end: YM + '-16T17:00:00',\n        location: 'General Area'\n      }, {\n        id: uid(),\n        title: 'Conference',\n        start: YESTERDAY,\n        end: TOMORROW,\n        description: 'Lorem ipsum dolor eius mod tempor labore',\n        className: \"fc-event-primary\",\n        location: 'Conference Hall A'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T10:30:00',\n        end: TODAY + 'T12:30:00',\n        description: 'Lorem ipsum dolor eiu idunt ut labore',\n        location: 'Meeting Room 11.06'\n      }, {\n        id: uid(),\n        title: 'Lunch',\n        start: TODAY + 'T12:00:00',\n        end: TODAY + 'T14:00:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, ut labore',\n        location: 'Cafeteria'\n      }, {\n        id: uid(),\n        title: 'Meeting',\n        start: TODAY + 'T14:30:00',\n        end: TODAY + 'T15:30:00',\n        className: \"fc-event-warning\",\n        description: 'Lorem ipsum conse ctetur adipi scing',\n        location: 'Meeting Room 11.10'\n      }, {\n        id: uid(),\n        title: 'Happy Hour',\n        start: TODAY + 'T17:30:00',\n        end: TODAY + 'T21:30:00',\n        className: \"fc-event-info\",\n        description: 'Lorem ipsum dolor sit amet, conse ctetur',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Dinner',\n        start: TOMORROW + 'T18:00:00',\n        end: TOMORROW + 'T21:00:00',\n        className: \"fc-event-solid-danger fc-event-light\",\n        description: 'Lorem ipsum dolor sit ctetur adipi scing',\n        location: 'New York Steakhouse'\n      }, {\n        id: uid(),\n        title: 'Birthday Party',\n        start: TOMORROW + 'T12:00:00',\n        end: TOMORROW + 'T14:00:00',\n        className: \"fc-event-primary\",\n        description: 'Lorem ipsum dolor sit amet, scing',\n        location: 'The English Pub'\n      }, {\n        id: uid(),\n        title: 'Site visit',\n        start: YM + '-28',\n        end: YM + '-29',\n        className: \"fc-event-solid-info fc-event-light\",\n        description: 'Lorem ipsum dolor sit amet, labore',\n        location: '271, Spring Street'\n      }],\n      // Handle changing calendar views --- more info: https://fullcalendar.io/docs/datesSet\n      datesSet: function datesSet() {\n        // do some stuff\n      }\n    });\n    calendar.render();\n  };\n\n  // Init validator\n  var initValidator = function initValidator() {\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    validator = FormValidation.formValidation(form, {\n      fields: {\n        'calendar_event_name': {\n          validators: {\n            notEmpty: {\n              message: 'Event name is required'\n            }\n          }\n        },\n        'calendar_event_start_date': {\n          validators: {\n            notEmpty: {\n              message: 'Start date is required'\n            }\n          }\n        },\n        'calendar_event_end_date': {\n          validators: {\n            notEmpty: {\n              message: 'End date is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n  };\n\n  // Initialize datepickers --- more info: https://flatpickr.js.org/\n  var initDatepickers = function initDatepickers() {\n    startFlatpickr = flatpickr(startDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    endFlatpickr = flatpickr(endDatepicker, {\n      enableTime: false,\n      dateFormat: \"Y-m-d\"\n    });\n    startTimeFlatpickr = flatpickr(startTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n    endTimeFlatpickr = flatpickr(endTimepicker, {\n      enableTime: true,\n      noCalendar: true,\n      dateFormat: \"H:i\"\n    });\n  };\n\n  // Handle add button\n  var handleAddButton = function handleAddButton() {\n    addButton.addEventListener('click', function (e) {\n      // Reset form data\n      data = {\n        id: '',\n        eventName: '',\n        eventDescription: '',\n        startDate: new Date(),\n        endDate: new Date(),\n        allDay: false\n      };\n      handleNewEvent();\n    });\n  };\n\n  // Handle add new event\n  var handleNewEvent = function handleNewEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Add a New Event\";\n    modal.show();\n\n    // Select datepicker wrapper elements\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n\n    // Handle all day toggle\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data);\n\n    // Handle submit form\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable submit button whilst loading\n            submitButton.disabled = true;\n\n            // Simulate form submission\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Show popup confirmation\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Weiter!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n\n                  // Enable submit button after loading\n                  submitButton.disabled = false;\n\n                  // Detect if is all day event\n                  var allDayEvent = false;\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  }\n\n                  // Merge date & time\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  }\n\n                  // Add new event to calendar\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render();\n\n                  // Reset form for demo purposes only\n                  form.reset();\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning\n            Swal.fire({\n              text: \"Es sind Fehler aufgetreten, bitte versuche es erneut.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Weiter!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  // Handle edit event\n  var handleEditEvent = function handleEditEvent() {\n    // Update modal title\n    modalTitle.innerText = \"Edit an Event\";\n    modal.show();\n\n    // Select datepicker wrapper elements\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n\n    // Handle all day toggle\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    allDayToggle.addEventListener('click', function (e) {\n      if (e.target.checked) {\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.add('d-none');\n        });\n      } else {\n        endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n        datepickerWrappers.forEach(function (dw) {\n          dw.classList.remove('d-none');\n        });\n      }\n    });\n    populateForm(data);\n\n    // Handle submit form\n    submitButton.addEventListener('click', function (e) {\n      // Prevent default button action\n      e.preventDefault();\n\n      // Validate form before submit\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Show loading indication\n            submitButton.setAttribute('data-kt-indicator', 'on');\n\n            // Disable submit button whilst loading\n            submitButton.disabled = true;\n\n            // Simulate form submission\n            setTimeout(function () {\n              // Simulate form submission\n              submitButton.removeAttribute('data-kt-indicator');\n\n              // Show popup confirmation\n              Swal.fire({\n                text: \"New event added to calendar!\",\n                icon: \"success\",\n                buttonsStyling: false,\n                confirmButtonText: \"Weiter!\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  modal.hide();\n\n                  // Enable submit button after loading\n                  submitButton.disabled = false;\n\n                  // Remove old event\n                  calendar.getEventById(data.id).remove();\n\n                  // Detect if is all day event\n                  var allDayEvent = false;\n                  if (allDayToggle.checked) {\n                    allDayEvent = true;\n                  }\n                  if (startTimeFlatpickr.selectedDates.length === 0) {\n                    allDayEvent = true;\n                  }\n\n                  // Merge date & time\n                  var startDateTime = moment(startFlatpickr.selectedDates[0]).format();\n                  var endDateTime = moment(endFlatpickr.selectedDates[endFlatpickr.selectedDates.length - 1]).format();\n                  if (!allDayEvent) {\n                    var startDate = moment(startFlatpickr.selectedDates[0]).format('YYYY-MM-DD');\n                    var endDate = startDate;\n                    var startTime = moment(startTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    var endTime = moment(endTimeFlatpickr.selectedDates[0]).format('HH:mm:ss');\n                    startDateTime = startDate + 'T' + startTime;\n                    endDateTime = endDate + 'T' + endTime;\n                  }\n\n                  // Add new event to calendar\n                  calendar.addEvent({\n                    id: uid(),\n                    title: eventName.value,\n                    description: eventDescription.value,\n                    location: eventLocation.value,\n                    start: startDateTime,\n                    end: endDateTime,\n                    allDay: allDayEvent\n                  });\n                  calendar.render();\n\n                  // Reset form for demo purposes only\n                  form.reset();\n                }\n              });\n\n              //form.submit(); // Submit form\n            }, 2000);\n          } else {\n            // Show popup warning\n            Swal.fire({\n              text: \"Es sind Fehler aufgetreten, bitte versuche es erneut.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Weiter!\",\n              customClass: {\n                confirmButton: \"btn btn-primary\"\n              }\n            });\n          }\n        });\n      }\n    });\n  };\n\n  // Handle view event\n  var handleViewEvent = function handleViewEvent() {\n    viewModal.show();\n\n    // Detect all day event\n    var eventNameMod;\n    var startDateMod;\n    var endDateMod;\n\n    // Generate labels\n    if (data.allDay) {\n      eventNameMod = 'All Day';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY');\n    } else {\n      eventNameMod = '';\n      startDateMod = moment(data.startDate).format('Do MMM, YYYY - h:mm a');\n      endDateMod = moment(data.endDate).format('Do MMM, YYYY - h:mm a');\n    }\n\n    // Populate view data\n    viewEventName.innerText = data.eventName;\n    viewAllDay.innerText = eventNameMod;\n    viewEventDescription.innerText = data.eventDescription ? data.eventDescription : '--';\n    viewEventLocation.innerText = data.eventLocation ? data.eventLocation : '--';\n    viewStartDate.innerText = startDateMod;\n    viewEndDate.innerText = endDateMod;\n  };\n\n  // Handle delete event\n  var handleDeleteEvent = function handleDeleteEvent() {\n    viewDeleteButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to delete this event?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          calendar.getEventById(data.id).remove();\n          viewModal.hide(); // Hide modal\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your event was not deleted!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Handle edit button\n  var handleEditButton = function handleEditButton() {\n    viewEditButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      viewModal.hide();\n      handleEditEvent();\n    });\n  };\n\n  // Handle cancel button\n  var handleCancelButton = function handleCancelButton() {\n    // Edit event modal cancel button\n    cancelButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\n          modal.hide(); // Hide modal\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Handle close button\n  var handleCloseButton = function handleCloseButton() {\n    // Edit event modal close button\n    closeButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      Swal.fire({\n        text: \"Are you sure you would like to cancel?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, cancel it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          form.reset(); // Reset form\n          modal.hide(); // Hide modal\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your form has not been cancelled!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Handle view button\n  var handleViewButton = function handleViewButton() {\n    var viewButton = document.querySelector('#kt_calendar_event_view_button');\n    viewButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      hidePopovers();\n      handleViewEvent();\n    });\n  };\n\n  // Helper functions\n\n  // Reset form validator on modal close\n  var resetFormValidator = function resetFormValidator(element) {\n    // Target modal hidden event --- For more info: https://getbootstrap.com/docs/5.0/components/modal/#events\n    element.addEventListener('hidden.bs.modal', function (e) {\n      if (validator) {\n        // Reset form validator. For more info: https://formvalidation.io/guide/api/reset-form\n        validator.resetForm(true);\n      }\n    });\n  };\n\n  // Populate form\n  var populateForm = function populateForm() {\n    eventName.value = data.eventName ? data.eventName : '';\n    eventDescription.value = data.eventDescription ? data.eventDescription : '';\n    eventLocation.value = data.eventLocation ? data.eventLocation : '';\n    startFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n\n    // Handle null end dates\n    var endDate = data.endDate ? data.endDate : moment(data.startDate).format();\n    endFlatpickr.setDate(endDate, true, 'Y-m-d');\n    var allDayToggle = form.querySelector('#kt_calendar_datepicker_allday');\n    var datepickerWrappers = form.querySelectorAll('[data-kt-calendar=\"datepicker\"]');\n    if (data.allDay) {\n      allDayToggle.checked = true;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.add('d-none');\n      });\n    } else {\n      startTimeFlatpickr.setDate(data.startDate, true, 'Y-m-d H:i');\n      endTimeFlatpickr.setDate(data.endDate, true, 'Y-m-d H:i');\n      endFlatpickr.setDate(data.startDate, true, 'Y-m-d');\n      allDayToggle.checked = false;\n      datepickerWrappers.forEach(function (dw) {\n        dw.classList.remove('d-none');\n      });\n    }\n  };\n\n  // Format FullCalendar reponses\n  var formatArgs = function formatArgs(res) {\n    data.id = res.id;\n    data.eventName = res.title;\n    data.eventDescription = res.description;\n    data.eventLocation = res.location;\n    data.startDate = res.startStr;\n    data.endDate = res.endStr;\n    data.allDay = res.allDay;\n  };\n\n  // Generate unique IDs for events\n  var uid = function uid() {\n    return Date.now().toString() + Math.floor(Math.random() * 1000).toString();\n  };\n  return {\n    // Public Functions\n    init: function init() {\n      // Define variables\n      // Add event modal\n      var element = document.getElementById('kt_modal_add_event');\n      form = element.querySelector('#kt_modal_add_event_form');\n      eventName = form.querySelector('[name=\"calendar_event_name\"]');\n      eventDescription = form.querySelector('[name=\"calendar_event_description\"]');\n      eventLocation = form.querySelector('[name=\"calendar_event_location\"]');\n      startDatepicker = form.querySelector('#kt_calendar_datepicker_start_date');\n      endDatepicker = form.querySelector('#kt_calendar_datepicker_end_date');\n      startTimepicker = form.querySelector('#kt_calendar_datepicker_start_time');\n      endTimepicker = form.querySelector('#kt_calendar_datepicker_end_time');\n      addButton = document.querySelector('[data-kt-calendar=\"add\"]');\n      submitButton = form.querySelector('#kt_modal_add_event_submit');\n      cancelButton = form.querySelector('#kt_modal_add_event_cancel');\n      closeButton = element.querySelector('#kt_modal_add_event_close');\n      modalTitle = form.querySelector('[data-kt-calendar=\"title\"]');\n      modal = new bootstrap.Modal(element);\n\n      // View event modal\n      var viewElement = document.getElementById('kt_modal_view_event');\n      viewModal = new bootstrap.Modal(viewElement);\n      viewEventName = viewElement.querySelector('[data-kt-calendar=\"event_name\"]');\n      viewAllDay = viewElement.querySelector('[data-kt-calendar=\"all_day\"]');\n      viewEventDescription = viewElement.querySelector('[data-kt-calendar=\"event_description\"]');\n      viewEventLocation = viewElement.querySelector('[data-kt-calendar=\"event_location\"]');\n      viewStartDate = viewElement.querySelector('[data-kt-calendar=\"event_start_date\"]');\n      viewEndDate = viewElement.querySelector('[data-kt-calendar=\"event_end_date\"]');\n      viewEditButton = viewElement.querySelector('#kt_modal_view_event_edit');\n      viewDeleteButton = viewElement.querySelector('#kt_modal_view_event_delete');\n      initCalendarApp();\n      initValidator();\n      initDatepickers();\n      handleEditButton();\n      handleAddButton();\n      handleDeleteEvent();\n      handleCancelButton();\n      handleCloseButton();\n      resetFormValidator(element);\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTAppCalendar.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/calendar/calendar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/calendar/calendar.js"]();
/******/ 	
/******/ })()
;