/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/assets/core/js/custom/apps/file-manager/list.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/core/js/custom/apps/file-manager/list.js ***!
  \*******************************************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTFileManagerList = function () {\n  // Define shared variables\n  var datatable;\n  var table;\n\n  // Define template element variables\n  var uploadTemplate;\n  var renameTemplate;\n  var actionTemplate;\n  var checkboxTemplate;\n\n  // Private functions\n  var initTemplates = function initTemplates() {\n    uploadTemplate = document.querySelector('[data-kt-filemanager-template=\"upload\"]');\n    renameTemplate = document.querySelector('[data-kt-filemanager-template=\"rename\"]');\n    actionTemplate = document.querySelector('[data-kt-filemanager-template=\"action\"]');\n    checkboxTemplate = document.querySelector('[data-kt-filemanager-template=\"checkbox\"]');\n  };\n  var initDatatable = function initDatatable() {\n    // Set date data order\n    var tableRows = table.querySelectorAll('tbody tr');\n    tableRows.forEach(function (row) {\n      var dateRow = row.querySelectorAll('td');\n      var dateCol = dateRow[3]; // select date from 4th column in table\n      var realDate = moment(dateCol.innerHTML, \"DD MMM YYYY, LT\").format();\n      dateCol.setAttribute('data-order', realDate);\n    });\n    var foldersListOptions = {\n      \"info\": false,\n      'order': [],\n      \"scrollY\": \"700px\",\n      \"scrollCollapse\": true,\n      \"paging\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"\".concat(hostUrl, \"media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\")\n      }\n    };\n    var filesListOptions = {\n      \"info\": false,\n      'order': [],\n      'pageLength': 10,\n      \"lengthChange\": false,\n      'ordering': false,\n      'columns': [{\n        data: 'checkbox'\n      }, {\n        data: 'name'\n      }, {\n        data: 'size'\n      }, {\n        data: 'date'\n      }, {\n        data: 'action'\n      }],\n      'language': {\n        emptyTable: \"<div class=\\\"d-flex flex-column flex-center\\\">\\n                    <img src=\\\"\".concat(hostUrl, \"media/illustrations/sketchy-1/5.png\\\" class=\\\"mw-400px\\\" />\\n                    <div class=\\\"fs-1 fw-bolder text-dark mb-4\\\">No items found.</div>\\n                    <div class=\\\"fs-6\\\">Start creating new folders or uploading a new file!</div>\\n                </div>\")\n      },\n      conditionalPaging: true\n    };\n\n    // Define datatable options to load\n    var loadOptions;\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      loadOptions = foldersListOptions;\n    } else {\n      loadOptions = filesListOptions;\n    }\n\n    // Init datatable --- more info on datatables: https://datatables.net/manual/\n    datatable = $(table).DataTable(loadOptions);\n\n    // Re-init functions on every table re-draw -- more info: https://datatables.net/reference/event/draw\n    datatable.on('draw', function () {\n      initToggleToolbar();\n      handleDeleteRows();\n      toggleToolbars();\n      resetNewFolder();\n      KTMenu.createInstances();\n      initCopyLink();\n      countTotalItems();\n      handleRename();\n    });\n  };\n\n  // Search Datatable --- official docs reference: https://datatables.net/reference/api/search()\n  var handleSearchDatatable = function handleSearchDatatable() {\n    var filterSearch = document.querySelector('[data-kt-filemanager-table-filter=\"search\"]');\n    filterSearch.addEventListener('keyup', function (e) {\n      datatable.search(e.target.value).draw();\n    });\n  };\n\n  // Delete customer\n  var handleDeleteRows = function handleDeleteRows() {\n    // Select all delete buttons\n    var deleteButtons = table.querySelectorAll('[data-kt-filemanager-table-filter=\"delete_row\"]');\n    deleteButtons.forEach(function (d) {\n      // Delete button on click\n      d.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Select parent row\n        var parent = e.target.closest('tr');\n\n        // Get customer name\n        var fileName = parent.querySelectorAll('td')[1].innerText;\n\n        // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n        Swal.fire({\n          text: \"Are you sure you want to delete \" + fileName + \"?\",\n          icon: \"warning\",\n          showCancelButton: true,\n          buttonsStyling: false,\n          confirmButtonText: \"Yes, delete!\",\n          cancelButtonText: \"No, cancel\",\n          customClass: {\n            confirmButton: \"btn fw-bold btn-danger\",\n            cancelButton: \"btn fw-bold btn-active-light-primary\"\n          }\n        }).then(function (result) {\n          if (result.value) {\n            Swal.fire({\n              text: \"You have deleted \" + fileName + \"!.\",\n              icon: \"success\",\n              buttonsStyling: false,\n              confirmButtonText: \"Weiter!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            }).then(function () {\n              // Remove current row\n              datatable.row($(parent)).remove().draw();\n            });\n          } else if (result.dismiss === 'cancel') {\n            Swal.fire({\n              text: customerName + \" was not deleted.\",\n              icon: \"error\",\n              buttonsStyling: false,\n              confirmButtonText: \"Weiter!\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-primary\"\n              }\n            });\n          }\n        });\n      });\n    });\n  };\n\n  // Init toggle toolbar\n  var initToggleToolbar = function initToggleToolbar() {\n    // Toggle selected action toolbar\n    // Select all checkboxes\n    var checkboxes = table.querySelectorAll('[type=\"checkbox\"]');\n    if (table.getAttribute('data-kt-filemanager-table') === 'folders') {\n      checkboxes = document.querySelectorAll('#kt_file_manager_list_wrapper [type=\"checkbox\"]');\n    }\n\n    // Select elements\n    var deleteSelected = document.querySelector('[data-kt-filemanager-table-select=\"delete_selected\"]');\n\n    // Toggle delete selected toolbar\n    checkboxes.forEach(function (c) {\n      // Checkbox on click event\n      c.addEventListener('click', function () {\n        console.log(c);\n        setTimeout(function () {\n          toggleToolbars();\n        }, 50);\n      });\n    });\n\n    // Deleted selected rows\n    deleteSelected.addEventListener('click', function () {\n      // SweetAlert2 pop up --- official docs reference: https://sweetalert2.github.io/\n      Swal.fire({\n        text: \"Are you sure you want to delete selected files or folders?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, delete!\",\n        cancelButtonText: \"No, cancel\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\",\n          cancelButton: \"btn fw-bold btn-active-light-primary\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          Swal.fire({\n            text: \"You have deleted all selected  files or folders!.\",\n            icon: \"success\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          }).then(function () {\n            // Remove all selected customers\n            checkboxes.forEach(function (c) {\n              if (c.checked) {\n                datatable.row($(c.closest('tbody tr'))).remove().draw();\n              }\n            });\n\n            // Remove header checked box\n            var headerCheckbox = table.querySelectorAll('[type=\"checkbox\"]')[0];\n            headerCheckbox.checked = false;\n          });\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Selected  files or folders was not deleted.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn fw-bold btn-primary\"\n            }\n          });\n        }\n      });\n    });\n  };\n\n  // Toggle toolbars\n  var toggleToolbars = function toggleToolbars() {\n    // Define variables\n    var toolbarBase = document.querySelector('[data-kt-filemanager-table-toolbar=\"base\"]');\n    var toolbarSelected = document.querySelector('[data-kt-filemanager-table-toolbar=\"selected\"]');\n    var selectedCount = document.querySelector('[data-kt-filemanager-table-select=\"selected_count\"]');\n\n    // Select refreshed checkbox DOM elements \n    var allCheckboxes = table.querySelectorAll('tbody [type=\"checkbox\"]');\n\n    // Detect checkboxes state & count\n    var checkedState = false;\n    var count = 0;\n\n    // Count checked boxes\n    allCheckboxes.forEach(function (c) {\n      if (c.checked) {\n        checkedState = true;\n        count++;\n      }\n    });\n\n    // Toggle toolbars\n    if (checkedState) {\n      selectedCount.innerHTML = count;\n      toolbarBase.classList.add('d-none');\n      toolbarSelected.classList.remove('d-none');\n    } else {\n      toolbarBase.classList.remove('d-none');\n      toolbarSelected.classList.add('d-none');\n    }\n  };\n\n  // Handle new folder\n  var handleNewFolder = function handleNewFolder() {\n    // Select button\n    var newFolder = document.getElementById('kt_file_manager_new_folder');\n\n    // Handle click action\n    newFolder.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Ignore if input already exist\n      if (table.querySelector('#kt_file_manager_new_folder_row')) {\n        return;\n      }\n\n      // Add new blank row to datatable\n      var tableBody = table.querySelector('tbody');\n      var rowElement = uploadTemplate.cloneNode(true); // Clone template markup\n      tableBody.prepend(rowElement);\n\n      // Define template interactive elements\n      var rowForm = rowElement.querySelector('#kt_file_manager_add_folder_form');\n      var rowButton = rowElement.querySelector('#kt_file_manager_add_folder');\n      var cancelButton = rowElement.querySelector('#kt_file_manager_cancel_folder');\n      var folderIcon = rowElement.querySelector('#kt_file_manager_folder_icon');\n      var rowInput = rowElement.querySelector('[name=\"new_folder_name\"]');\n\n      // Define validator\n      // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n      var validator = FormValidation.formValidation(rowForm, {\n        fields: {\n          'new_folder_name': {\n            validators: {\n              notEmpty: {\n                message: 'Folder name is required'\n              }\n            }\n          }\n        },\n        plugins: {\n          trigger: new FormValidation.plugins.Trigger(),\n          bootstrap: new FormValidation.plugins.Bootstrap5({\n            rowSelector: '.fv-row',\n            eleInvalidClass: '',\n            eleValidClass: ''\n          })\n        }\n      });\n\n      // Handle add new folder button\n      rowButton.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Activate indicator\n        rowButton.setAttribute(\"data-kt-indicator\", \"on\");\n\n        // Validate form before submit\n        if (validator) {\n          validator.validate().then(function (status) {\n            console.log('validated!');\n            if (status == 'Valid') {\n              // Simulate process for demo only\n              setTimeout(function () {\n                var _folderLink$classList;\n                // Create folder link\n                var folderLink = document.createElement('a');\n                var folderLinkClasses = ['text-gray-800', 'text-hover-primary'];\n                folderLink.setAttribute('href', '?page=apps/file-manager/blank');\n                (_folderLink$classList = folderLink.classList).add.apply(_folderLink$classList, folderLinkClasses);\n                folderLink.innerText = rowInput.value;\n                var newRow = datatable.row.add({\n                  'checkbox': checkboxTemplate.innerHTML,\n                  'name': folderIcon.outerHTML + folderLink.outerHTML,\n                  \"size\": '-',\n                  \"date\": '-',\n                  'action': actionTemplate.innerHTML\n                }).node();\n                $(newRow).find('td').eq(4).attr('data-kt-filemanager-table', 'action_dropdown');\n                $(newRow).find('td').eq(4).addClass('text-end'); // Add custom class to last 'td' element --- more info: https://datatables.net/forums/discussion/22341/row-add-cell-class\n\n                // Re-sort datatable to allow new folder added at the top\n                var index = datatable.row(0).index(),\n                  rowCount = datatable.data().length - 1,\n                  insertedRow = datatable.row(rowCount).data(),\n                  tempRow;\n                for (var i = rowCount; i > index; i--) {\n                  tempRow = datatable.row(i - 1).data();\n                  datatable.row(i).data(tempRow);\n                  datatable.row(i - 1).data(insertedRow);\n                }\n                toastr.options = {\n                  \"closeButton\": true,\n                  \"debug\": false,\n                  \"newestOnTop\": false,\n                  \"progressBar\": false,\n                  \"positionClass\": \"toastr-top-right\",\n                  \"preventDuplicates\": false,\n                  \"showDuration\": \"300\",\n                  \"hideDuration\": \"1000\",\n                  \"timeOut\": \"5000\",\n                  \"extendedTimeOut\": \"1000\",\n                  \"showEasing\": \"swing\",\n                  \"hideEasing\": \"linear\",\n                  \"showMethod\": \"fadeIn\",\n                  \"hideMethod\": \"fadeOut\"\n                };\n                toastr.success(rowInput.value + ' was created!');\n\n                // Disable indicator\n                rowButton.removeAttribute(\"data-kt-indicator\");\n\n                // Reset input\n                rowInput.value = '';\n                datatable.draw(false);\n              }, 2000);\n            } else {\n              // Disable indicator\n              rowButton.removeAttribute(\"data-kt-indicator\");\n            }\n          });\n        }\n      });\n\n      // Handle cancel new folder button\n      cancelButton.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Activate indicator\n        cancelButton.setAttribute(\"data-kt-indicator\", \"on\");\n        setTimeout(function () {\n          // Disable indicator\n          cancelButton.removeAttribute(\"data-kt-indicator\");\n\n          // Toggle toastr\n          toastr.options = {\n            \"closeButton\": true,\n            \"debug\": false,\n            \"newestOnTop\": false,\n            \"progressBar\": false,\n            \"positionClass\": \"toastr-top-right\",\n            \"preventDuplicates\": false,\n            \"showDuration\": \"300\",\n            \"hideDuration\": \"1000\",\n            \"timeOut\": \"5000\",\n            \"extendedTimeOut\": \"1000\",\n            \"showEasing\": \"swing\",\n            \"hideEasing\": \"linear\",\n            \"showMethod\": \"fadeIn\",\n            \"hideMethod\": \"fadeOut\"\n          };\n          toastr.error('Cancelled new folder creation');\n          resetNewFolder();\n        }, 1000);\n      });\n    });\n  };\n\n  // Reset add new folder input\n  var resetNewFolder = function resetNewFolder() {\n    var newFolderRow = table.querySelector('#kt_file_manager_new_folder_row');\n    if (newFolderRow) {\n      newFolderRow.parentNode.removeChild(newFolderRow);\n    }\n  };\n\n  // Handle rename file or folder\n  var handleRename = function handleRename() {\n    var renameButton = table.querySelectorAll('[data-kt-filemanager-table=\"rename\"]');\n    renameButton.forEach(function (button) {\n      button.addEventListener('click', renameCallback);\n    });\n  };\n\n  // Rename callback\n  var renameCallback = function renameCallback(e) {\n    e.preventDefault();\n\n    // Define shared value\n    var nameValue;\n\n    // Stop renaming if there's an input existing\n    if (table.querySelectorAll('#kt_file_manager_rename_input').length > 0) {\n      Swal.fire({\n        text: \"Unsaved input detected. Please save or cancel the current item\",\n        icon: \"warning\",\n        buttonsStyling: false,\n        confirmButtonText: \"Weiter!\",\n        customClass: {\n          confirmButton: \"btn fw-bold btn-danger\"\n        }\n      });\n      return;\n    }\n\n    // Select parent row\n    var parent = e.target.closest('tr');\n\n    // Get name column\n    var nameCol = parent.querySelectorAll('td')[1];\n    var colIcon = nameCol.querySelector('.icon-wrapper');\n    nameValue = nameCol.innerText;\n\n    // Set rename input template\n    var renameInput = renameTemplate.cloneNode(true);\n    renameInput.querySelector('#kt_file_manager_rename_folder_icon').innerHTML = colIcon.outerHTML;\n\n    // Swap current column content with input template\n    nameCol.innerHTML = renameInput.innerHTML;\n\n    // Set input value with current file/folder name\n    parent.querySelector('#kt_file_manager_rename_input').value = nameValue;\n\n    // Rename file / folder validator\n    var renameValidator = FormValidation.formValidation(nameCol, {\n      fields: {\n        'rename_folder_name': {\n          validators: {\n            notEmpty: {\n              message: 'Name is required'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n\n    // Rename input button action\n    var renameInputButton = document.querySelector('#kt_file_manager_rename_folder');\n    renameInputButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Detect if valid\n      if (renameValidator) {\n        renameValidator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Pop up confirmation\n            Swal.fire({\n              text: \"Are you sure you want to rename \" + nameValue + \"?\",\n              icon: \"warning\",\n              showCancelButton: true,\n              buttonsStyling: false,\n              confirmButtonText: \"Yes, rename it!\",\n              cancelButtonText: \"No, cancel\",\n              customClass: {\n                confirmButton: \"btn fw-bold btn-danger\",\n                cancelButton: \"btn fw-bold btn-active-light-primary\"\n              }\n            }).then(function (result) {\n              if (result.value) {\n                Swal.fire({\n                  text: \"You have renamed \" + nameValue + \"!.\",\n                  icon: \"success\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Weiter!\",\n                  customClass: {\n                    confirmButton: \"btn fw-bold btn-primary\"\n                  }\n                }).then(function () {\n                  // Get new file / folder name value\n                  var newValue = document.querySelector('#kt_file_manager_rename_input').value;\n\n                  // New column data template\n                  var newData = \"<div class=\\\"d-flex align-items-center\\\">\\n                                        \".concat(colIcon.outerHTML, \"\\n                                        <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(newValue, \"</a>\\n                                    </div>\");\n\n                  // Draw datatable with new content -- Add more events here for any server-side events\n                  datatable.cell($(nameCol)).data(newData).draw();\n                });\n              } else if (result.dismiss === 'cancel') {\n                Swal.fire({\n                  text: nameValue + \" was not renamed.\",\n                  icon: \"error\",\n                  buttonsStyling: false,\n                  confirmButtonText: \"Weiter!\",\n                  customClass: {\n                    confirmButton: \"btn fw-bold btn-primary\"\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n\n    // Cancel rename input\n    var cancelInputButton = document.querySelector('#kt_file_manager_rename_folder_cancel');\n    cancelInputButton.addEventListener('click', function (e) {\n      e.preventDefault();\n\n      // Simulate process for demo only\n      cancelInputButton.setAttribute(\"data-kt-indicator\", \"on\");\n      setTimeout(function () {\n        var revertTemplate = \"<div class=\\\"d-flex align-items-center\\\">\\n                    \".concat(colIcon.outerHTML, \"\\n                    <a href=\\\"?page=apps/file-manager/files/\\\" class=\\\"text-gray-800 text-hover-primary\\\">\").concat(nameValue, \"</a>\\n                </div>\");\n\n        // Remove spinner\n        cancelInputButton.removeAttribute(\"data-kt-indicator\");\n\n        // Draw datatable with new content -- Add more events here for any server-side events\n        datatable.cell($(nameCol)).data(revertTemplate).draw();\n\n        // Toggle toastr\n        toastr.options = {\n          \"closeButton\": true,\n          \"debug\": false,\n          \"newestOnTop\": false,\n          \"progressBar\": false,\n          \"positionClass\": \"toastr-top-right\",\n          \"preventDuplicates\": false,\n          \"showDuration\": \"300\",\n          \"hideDuration\": \"1000\",\n          \"timeOut\": \"5000\",\n          \"extendedTimeOut\": \"1000\",\n          \"showEasing\": \"swing\",\n          \"hideEasing\": \"linear\",\n          \"showMethod\": \"fadeIn\",\n          \"hideMethod\": \"fadeOut\"\n        };\n        toastr.error('Cancelled rename function');\n      }, 1000);\n    });\n  };\n\n  // Init dropzone\n  var initDropzone = function initDropzone() {\n    // set the dropzone container id\n    var id = \"#kt_modal_upload_dropzone\";\n    var dropzone = document.querySelector(id);\n\n    // set the preview element template\n    var previewNode = dropzone.querySelector(\".dropzone-item\");\n    previewNode.id = \"\";\n    var previewTemplate = previewNode.parentNode.innerHTML;\n    previewNode.parentNode.removeChild(previewNode);\n    var myDropzone = new Dropzone(id, {\n      // Make the whole body a dropzone\n      url: \"path/to/your/server\",\n      // Set the url for your upload script location\n      parallelUploads: 10,\n      previewTemplate: previewTemplate,\n      maxFilesize: 1,\n      // Max filesize in MB\n      autoProcessQueue: false,\n      // Stop auto upload\n      autoQueue: false,\n      // Make sure the files aren't queued until manually added\n      previewsContainer: id + \" .dropzone-items\",\n      // Define the container to display the previews\n      clickable: id + \" .dropzone-select\" // Define the element that should be used as click trigger to select files.\n    });\n    myDropzone.on(\"addedfile\", function (file) {\n      // Hook each start button\n      file.previewElement.querySelector(id + \" .dropzone-start\").onclick = function () {\n        // myDropzone.enqueueFile(file); -- default dropzone function\n\n        // Process simulation for demo only\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      };\n      var dropzoneItems = dropzone.querySelectorAll('.dropzone-item');\n      dropzoneItems.forEach(function (dropzoneItem) {\n        dropzoneItem.style.display = '';\n      });\n      dropzone.querySelector('.dropzone-upload').style.display = \"inline-block\";\n      dropzone.querySelector('.dropzone-remove-all').style.display = \"inline-block\";\n    });\n\n    // Hide the total progress bar when nothing's uploading anymore\n    myDropzone.on(\"complete\", function (file) {\n      var progressBars = dropzone.querySelectorAll('.dz-complete');\n      setTimeout(function () {\n        progressBars.forEach(function (progressBar) {\n          progressBar.querySelector('.progress-bar').style.opacity = \"0\";\n          progressBar.querySelector('.progress').style.opacity = \"0\";\n          progressBar.querySelector('.dropzone-start').style.opacity = \"0\";\n        });\n      }, 300);\n    });\n\n    // Setup the buttons for all transfers\n    dropzone.querySelector(\".dropzone-upload\").addEventListener('click', function () {\n      // myDropzone.processQueue(); --- default dropzone process\n\n      // Process simulation for demo only\n      myDropzone.files.forEach(function (file) {\n        var progressBar = file.previewElement.querySelector('.progress-bar');\n        progressBar.style.opacity = \"1\";\n        var width = 1;\n        var timer = setInterval(function () {\n          if (width >= 100) {\n            myDropzone.emit(\"success\", file);\n            myDropzone.emit(\"complete\", file);\n            clearInterval(timer);\n          } else {\n            width++;\n            progressBar.style.width = width + '%';\n          }\n        }, 20);\n      });\n    });\n\n    // Setup the button for remove all files\n    dropzone.querySelector(\".dropzone-remove-all\").addEventListener('click', function () {\n      Swal.fire({\n        text: \"Are you sure you would like to remove all files?\",\n        icon: \"warning\",\n        showCancelButton: true,\n        buttonsStyling: false,\n        confirmButtonText: \"Yes, remove it!\",\n        cancelButtonText: \"No, return\",\n        customClass: {\n          confirmButton: \"btn btn-primary\",\n          cancelButton: \"btn btn-active-light\"\n        }\n      }).then(function (result) {\n        if (result.value) {\n          dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n          dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n          myDropzone.removeAllFiles(true);\n        } else if (result.dismiss === 'cancel') {\n          Swal.fire({\n            text: \"Your files was not removed!.\",\n            icon: \"error\",\n            buttonsStyling: false,\n            confirmButtonText: \"Weiter!\",\n            customClass: {\n              confirmButton: \"btn btn-primary\"\n            }\n          });\n        }\n      });\n    });\n\n    // On all files completed upload\n    myDropzone.on(\"queuecomplete\", function (progress) {\n      var uploadIcons = dropzone.querySelectorAll('.dropzone-upload');\n      uploadIcons.forEach(function (uploadIcon) {\n        uploadIcon.style.display = \"none\";\n      });\n    });\n\n    // On all files removed\n    myDropzone.on(\"removedfile\", function (file) {\n      if (myDropzone.files.length < 1) {\n        dropzone.querySelector('.dropzone-upload').style.display = \"none\";\n        dropzone.querySelector('.dropzone-remove-all').style.display = \"none\";\n      }\n    });\n  };\n\n  // Init copy link\n  var initCopyLink = function initCopyLink() {\n    // Select all copy link elements\n    var elements = table.querySelectorAll('[data-kt-filemanger-table=\"copy_link\"]');\n    elements.forEach(function (el) {\n      // Define elements\n      var button = el.querySelector('button');\n      var generator = el.querySelector('[data-kt-filemanger-table=\"copy_link_generator\"]');\n      var result = el.querySelector('[data-kt-filemanger-table=\"copy_link_result\"]');\n      var input = el.querySelector('input');\n\n      // Click action\n      button.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        // Reset toggle\n        generator.classList.remove('d-none');\n        result.classList.add('d-none');\n        var linkTimeout;\n        clearTimeout(linkTimeout);\n        linkTimeout = setTimeout(function () {\n          generator.classList.add('d-none');\n          result.classList.remove('d-none');\n          input.select();\n        }, 2000);\n      });\n    });\n  };\n\n  // Handle move to folder\n  var handleMoveToFolder = function handleMoveToFolder() {\n    var element = document.querySelector('#kt_modal_move_to_folder');\n    var form = element.querySelector('#kt_modal_move_to_folder_form');\n    var saveButton = form.querySelector('#kt_modal_move_to_folder_submit');\n    var moveModal = new bootstrap.Modal(element);\n\n    // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\n    var validator = FormValidation.formValidation(form, {\n      fields: {\n        'move_to_folder': {\n          validators: {\n            notEmpty: {\n              message: 'Please select a folder.'\n            }\n          }\n        }\n      },\n      plugins: {\n        trigger: new FormValidation.plugins.Trigger(),\n        bootstrap: new FormValidation.plugins.Bootstrap5({\n          rowSelector: '.fv-row',\n          eleInvalidClass: '',\n          eleValidClass: ''\n        })\n      }\n    });\n    saveButton.addEventListener('click', function (e) {\n      e.preventDefault();\n      saveButton.setAttribute(\"data-kt-indicator\", \"on\");\n      if (validator) {\n        validator.validate().then(function (status) {\n          console.log('validated!');\n          if (status == 'Valid') {\n            // Simulate process for demo only\n            setTimeout(function () {\n              Swal.fire({\n                text: \"Are you sure you would like to move to this folder\",\n                icon: \"warning\",\n                showCancelButton: true,\n                buttonsStyling: false,\n                confirmButtonText: \"Yes, move it!\",\n                cancelButtonText: \"No, return\",\n                customClass: {\n                  confirmButton: \"btn btn-primary\",\n                  cancelButton: \"btn btn-active-light\"\n                }\n              }).then(function (result) {\n                if (result.isConfirmed) {\n                  form.reset(); // Reset form\t\n                  moveModal.hide(); // Hide modal\t\t\t\n\n                  toastr.options = {\n                    \"closeButton\": true,\n                    \"debug\": false,\n                    \"newestOnTop\": false,\n                    \"progressBar\": false,\n                    \"positionClass\": \"toastr-top-right\",\n                    \"preventDuplicates\": false,\n                    \"showDuration\": \"300\",\n                    \"hideDuration\": \"1000\",\n                    \"timeOut\": \"5000\",\n                    \"extendedTimeOut\": \"1000\",\n                    \"showEasing\": \"swing\",\n                    \"hideEasing\": \"linear\",\n                    \"showMethod\": \"fadeIn\",\n                    \"hideMethod\": \"fadeOut\"\n                  };\n                  toastr.success('1 item has been moved.');\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                } else {\n                  Swal.fire({\n                    text: \"Your action has been cancelled!.\",\n                    icon: \"error\",\n                    buttonsStyling: false,\n                    confirmButtonText: \"Weiter!\",\n                    customClass: {\n                      confirmButton: \"btn btn-primary\"\n                    }\n                  });\n                  saveButton.removeAttribute(\"data-kt-indicator\");\n                }\n              });\n            }, 500);\n          } else {\n            saveButton.removeAttribute(\"data-kt-indicator\");\n          }\n        });\n      }\n    });\n  };\n\n  // Count total number of items\n  var countTotalItems = function countTotalItems() {\n    var counter = document.getElementById('kt_file_manager_items_counter');\n\n    // Count total number of elements in datatable --- more info: https://datatables.net/reference/api/count()\n    counter.innerText = datatable.rows().count() + ' items';\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      table = document.querySelector('#kt_file_manager_list');\n      if (!table) {\n        return;\n      }\n      initTemplates();\n      initDatatable();\n      initToggleToolbar();\n      handleSearchDatatable();\n      handleDeleteRows();\n      handleNewFolder();\n      initDropzone();\n      initCopyLink();\n      handleRename();\n      handleMoveToFolder();\n      countTotalItems();\n      KTMenu.createInstances();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTFileManagerList.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvZmlsZS1tYW5hZ2VyL2xpc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxJQUFJQSxpQkFBaUIsR0FBRyxZQUFZO0VBQ2hDO0VBQ0EsSUFBSUMsU0FBUztFQUNiLElBQUlDLEtBQUs7O0VBRVQ7RUFDQSxJQUFJQyxjQUFjO0VBQ2xCLElBQUlDLGNBQWM7RUFDbEIsSUFBSUMsY0FBYztFQUNsQixJQUFJQyxnQkFBZ0I7O0VBR3BCO0VBQ0EsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBLEVBQVM7SUFDeEJKLGNBQWMsR0FBR0ssUUFBUSxDQUFDQyxhQUFhLENBQUMseUNBQXlDLENBQUM7SUFDbEZMLGNBQWMsR0FBR0ksUUFBUSxDQUFDQyxhQUFhLENBQUMseUNBQXlDLENBQUM7SUFDbEZKLGNBQWMsR0FBR0csUUFBUSxDQUFDQyxhQUFhLENBQUMseUNBQXlDLENBQUM7SUFDbEZILGdCQUFnQixHQUFHRSxRQUFRLENBQUNDLGFBQWEsQ0FBQywyQ0FBMkMsQ0FBQztFQUMxRixDQUFDO0VBRUQsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBLEVBQVM7SUFDeEI7SUFDQSxJQUFNQyxTQUFTLEdBQUdULEtBQUssQ0FBQ1UsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO0lBRXBERCxTQUFTLENBQUNFLE9BQU8sQ0FBQyxVQUFBQyxHQUFHLEVBQUk7TUFDckIsSUFBTUMsT0FBTyxHQUFHRCxHQUFHLENBQUNGLGdCQUFnQixDQUFDLElBQUksQ0FBQztNQUMxQyxJQUFNSSxPQUFPLEdBQUdELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO01BQzVCLElBQU1FLFFBQVEsR0FBR0MsTUFBTSxDQUFDRixPQUFPLENBQUNHLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQztNQUN0RUosT0FBTyxDQUFDSyxZQUFZLENBQUMsWUFBWSxFQUFFSixR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dUQsZUFBZSxDQUFDLENBQUM7TUFDakJvRSxZQUFZLENBQUMsQ0FBQztNQUNkdEgsWUFBWSxDQUFDLENBQUM7TUFDZEUsWUFBWSxDQUFDLENBQUM7TUFDZDZKLGtCQUFrQixDQUFDLENBQUM7TUFDcEI5SixlQUFlLENBQUMsQ0FBQztNQUNqQkgsTUFBTSxDQUFDQyxlQUFlLENBQUMsQ0FBQztJQUM1QjtFQUNKLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQzs7QUFFSDtBQUNBNEssTUFBTSxDQUFDQyxrQkFBa0IsQ0FBQyxZQUFZO0VBQ2xDcE4saUJBQWlCLENBQUNrTixJQUFJLENBQUMsQ0FBQztBQUM1QixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2NvcmUvanMvY3VzdG9tL2FwcHMvZmlsZS1tYW5hZ2VyL2xpc3QuanM/ZTc4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIENsYXNzIGRlZmluaXRpb25cclxudmFyIEtURmlsZU1hbmFnZXJMaXN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRGVmaW5lIHNoYXJlZCB2YXJpYWJsZXNcclxuICAgIHZhciBkYXRhdGFibGU7XHJcbiAgICB2YXIgdGFibGVcclxuXHJcbiAgICAvLyBEZWZpbmUgdGVtcGxhdGUgZWxlbWVudCB2YXJpYWJsZXNcclxuICAgIHZhciB1cGxvYWRUZW1wbGF0ZTtcclxuICAgIHZhciByZW5hbWVUZW1wbGF0ZTtcclxuICAgIHZhciBhY3Rpb25UZW1wbGF0ZTtcclxuICAgIHZhciBjaGVja2JveFRlbXBsYXRlO1xyXG5cclxuXHJcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uc1xyXG4gICAgY29uc3QgaW5pdFRlbXBsYXRlcyA9ICgpID0+IHtcclxuICAgICAgICB1cGxvYWRUZW1wbGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWZpbGVtYW5hZ2VyLXRlbXBsYXRlPVwidXBsb2FkXCJdJyk7XHJcbiAgICAgICAgcmVuYW1lVGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1maWxlbWFuYWdlci10ZW1wbGF0ZT1cInJlbmFtZVwiXScpO1xyXG4gICAgICAgIGFjdGlvblRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtZmlsZW1hbmFnZXItdGVtcGxhdGU9XCJhY3Rpb25cIl0nKTtcclxuICAgICAgICBjaGVja2JveFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtZmlsZW1hbmFnZXItdGVtcGxhdGU9XCJjaGVja2JveFwiXScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGluaXREYXRhdGFibGUgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gU2V0IGRhdGUgZGF0YSBvcmRlclxyXG4gICAgICAgIGNvbnN0IHRhYmxlUm93cyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IHRyJyk7XHJcblxyXG4gICAgICAgIHRhYmxlUm93cy5mb3JFYWNoKHJvdyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGVSb3cgPSByb3cucXVlcnlTZWxlY3RvckFsbCgndGQnKTtcclxuICAgICAgICAgICAgY29uc3QgZGF0ZUNvbCA9IGRhdGVSb3dbM107IC8vIHNlbGVjdCBkYXRlIGZyb20gNHRoIGNvbHVtbiBpbiB0YWJsZVxyXG4gICAgICAgICAgICBjb25zdCByZWFsRGF0ZSA9IG1vbWVudChkYXRlQ29sLmlubmVySFRNTCwgXCJERCBNTU0gWVlZWSwgTFRcIikuZm9ybWF0KCk7XHJcbiAgICAgICAgICAgIGRhdGVDb2wuc2V0QXR0cmlidXRlKCdkYXRhLW9yZGVyJywgcmVhbERhdGUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBmb2xkZXJzTGlzdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIFwiaW5mb1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgJ29yZGVyJzogW10sXHJcbiAgICAgICAgICAgIFwic2Nyb2xsWVwiOiBcIjcwMHB4XCIsXHJcbiAgICAgICAgICAgIFwic2Nyb2xsQ29sbGFwc2VcIjogdHJ1ZSxcclxuICAgICAgICAgICAgXCJwYWdpbmdcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICdvcmRlcmluZyc6IGZhbHNlLFxyXG4gICAgICAgICAgICAnY29sdW1ucyc6IFtcclxuICAgICAgICAgICAgICAgIHsgZGF0YTogJ2NoZWNrYm94JyB9LFxyXG4gICAgICAgICAgICAgICAgeyBkYXRhOiAnbmFtZScgfSxcclxuICAgICAgICAgICAgICAgIHsgZGF0YTogJ3NpemUnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGRhdGE6ICdkYXRlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBkYXRhOiAnYWN0aW9uJyB9LFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAnbGFuZ3VhZ2UnOiB7XHJcbiAgICAgICAgICAgICAgICBlbXB0eVRhYmxlOiBgPGRpdiBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHtob3N0VXJsfW1lZGlhL2lsbHVzdHJhdGlvbnMvc2tldGNoeS0xLzUucG5nXCIgY2xhc3M9XCJtdy00MDBweFwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZzLTEgZnctYm9sZGVyIHRleHQtZGFya1wiPk5vIGl0ZW1zIGZvdW5kLjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmcy02XCI+U3RhcnQgY3JlYXRpbmcgbmV3IGZvbGRlcnMgb3IgdXBsb2FkaW5nIGEgbmV3IGZpbGUhPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5gXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBmaWxlc0xpc3RPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBcImluZm9cIjogZmFsc2UsXHJcbiAgICAgICAgICAgICdvcmRlcic6IFtdLFxyXG4gICAgICAgICAgICAncGFnZUxlbmd0aCc6IDEwLFxyXG4gICAgICAgICAgICBcImxlbmd0aENoYW5nZVwiOiBmYWxzZSxcclxuICAgICAgICAgICAgJ29yZGVyaW5nJzogZmFsc2UsXHJcbiAgICAgICAgICAgICdjb2x1bW5zJzogW1xyXG4gICAgICAgICAgICAgICAgeyBkYXRhOiAnY2hlY2tib3gnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGRhdGE6ICduYW1lJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBkYXRhOiAnc2l6ZScgfSxcclxuICAgICAgICAgICAgICAgIHsgZGF0YTogJ2RhdGUnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGRhdGE6ICdhY3Rpb24nIH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICdsYW5ndWFnZSc6IHtcclxuICAgICAgICAgICAgICAgIGVtcHR5VGFibGU6IGA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke2hvc3RVcmx9bWVkaWEvaWxsdXN0cmF0aW9ucy9za2V0Y2h5LTEvNS5wbmdcIiBjbGFzcz1cIm13LTQwMHB4XCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtMSBmdy1ib2xkZXIgdGV4dC1kYXJrIG1iLTRcIj5ObyBpdGVtcyBmb3VuZC48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnMtNlwiPlN0YXJ0IGNyZWF0aW5nIG5ldyBmb2xkZXJzIG9yIHVwbG9hZGluZyBhIG5ldyBmaWxlITwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjb25kaXRpb25hbFBhZ2luZzogdHJ1ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIERlZmluZSBkYXRhdGFibGUgb3B0aW9ucyB0byBsb2FkXHJcbiAgICAgICAgdmFyIGxvYWRPcHRpb25zO1xyXG4gICAgICAgIGlmICh0YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEta3QtZmlsZW1hbmFnZXItdGFibGUnKSA9PT0gJ2ZvbGRlcnMnKSB7XHJcbiAgICAgICAgICAgIGxvYWRPcHRpb25zID0gZm9sZGVyc0xpc3RPcHRpb25zO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvYWRPcHRpb25zID0gZmlsZXNMaXN0T3B0aW9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXQgZGF0YXRhYmxlIC0tLSBtb3JlIGluZm8gb24gZGF0YXRhYmxlczogaHR0cHM6Ly9kYXRhdGFibGVzLm5ldC9tYW51YWwvXHJcbiAgICAgICAgZGF0YXRhYmxlID0gJCh0YWJsZSkuRGF0YVRhYmxlKGxvYWRPcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gUmUtaW5pdCBmdW5jdGlvbnMgb24gZXZlcnkgdGFibGUgcmUtZHJhdyAtLSBtb3JlIGluZm86IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvcmVmZXJlbmNlL2V2ZW50L2RyYXdcclxuICAgICAgICBkYXRhdGFibGUub24oJ2RyYXcnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRUb2dnbGVUb29sYmFyKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZURlbGV0ZVJvd3MoKTtcclxuICAgICAgICAgICAgdG9nZ2xlVG9vbGJhcnMoKTtcclxuICAgICAgICAgICAgcmVzZXROZXdGb2xkZXIoKTtcclxuICAgICAgICAgICAgS1RNZW51LmNyZWF0ZUluc3RhbmNlcygpO1xyXG4gICAgICAgICAgICBpbml0Q29weUxpbmsoKTtcclxuICAgICAgICAgICAgY291bnRUb3RhbEl0ZW1zKCk7XHJcbiAgICAgICAgICAgIGhhbmRsZVJlbmFtZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNlYXJjaCBEYXRhdGFibGUgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL2RhdGF0YWJsZXMubmV0L3JlZmVyZW5jZS9hcGkvc2VhcmNoKClcclxuICAgIGNvbnN0IGhhbmRsZVNlYXJjaERhdGF0YWJsZSA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBmaWx0ZXJTZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1maWxlbWFuYWdlci10YWJsZS1maWx0ZXI9XCJzZWFyY2hcIl0nKTtcclxuICAgICAgICBmaWx0ZXJTZWFyY2guYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBkYXRhdGFibGUuc2VhcmNoKGUudGFyZ2V0LnZhbHVlKS5kcmF3KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVsZXRlIGN1c3RvbWVyXHJcbiAgICBjb25zdCBoYW5kbGVEZWxldGVSb3dzID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgZGVsZXRlIGJ1dHRvbnNcclxuICAgICAgICBjb25zdCBkZWxldGVCdXR0b25zID0gdGFibGUucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEta3QtZmlsZW1hbmFnZXItdGFibGUtZmlsdGVyPVwiZGVsZXRlX3Jvd1wiXScpO1xyXG5cclxuICAgICAgICBkZWxldGVCdXR0b25zLmZvckVhY2goZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIERlbGV0ZSBidXR0b24gb24gY2xpY2tcclxuICAgICAgICAgICAgZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2VsZWN0IHBhcmVudCByb3dcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gR2V0IGN1c3RvbWVyIG5hbWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJylbMV0uaW5uZXJUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFN3ZWV0QWxlcnQyIHBvcCB1cCAtLS0gb2ZmaWNpYWwgZG9jcyByZWZlcmVuY2U6IGh0dHBzOi8vc3dlZXRhbGVydDIuZ2l0aHViLmlvL1xyXG4gICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgXCIgKyBmaWxlTmFtZSArIFwiP1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgZGVsZXRlIVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiTm8sIGNhbmNlbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLWRhbmdlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLWFjdGl2ZS1saWdodC1wcmltYXJ5XCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdSBoYXZlIGRlbGV0ZWQgXCIgKyBmaWxlTmFtZSArIFwiIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic3VjY2Vzc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJyZW50IHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXRhYmxlLnJvdygkKHBhcmVudCkpLnJlbW92ZSgpLmRyYXcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGN1c3RvbWVyTmFtZSArIFwiIHdhcyBub3QgZGVsZXRlZC5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdCB0b2dnbGUgdG9vbGJhclxyXG4gICAgY29uc3QgaW5pdFRvZ2dsZVRvb2xiYXIgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gVG9nZ2xlIHNlbGVjdGVkIGFjdGlvbiB0b29sYmFyXHJcbiAgICAgICAgLy8gU2VsZWN0IGFsbCBjaGVja2JveGVzXHJcbiAgICAgICAgdmFyIGNoZWNrYm94ZXMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cImNoZWNrYm94XCJdJyk7XHJcbiAgICAgICAgaWYgKHRhYmxlLmdldEF0dHJpYnV0ZSgnZGF0YS1rdC1maWxlbWFuYWdlci10YWJsZScpID09PSAnZm9sZGVycycpIHtcclxuICAgICAgICAgICAgY2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNrdF9maWxlX21hbmFnZXJfbGlzdF93cmFwcGVyIFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNlbGVjdCBlbGVtZW50c1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZVNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtZmlsZW1hbmFnZXItdGFibGUtc2VsZWN0PVwiZGVsZXRlX3NlbGVjdGVkXCJdJyk7XHJcblxyXG4gICAgICAgIC8vIFRvZ2dsZSBkZWxldGUgc2VsZWN0ZWQgdG9vbGJhclxyXG4gICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgLy8gQ2hlY2tib3ggb24gY2xpY2sgZXZlbnRcclxuICAgICAgICAgICAgYy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGMpO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlVG9vbGJhcnMoKTtcclxuICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIERlbGV0ZWQgc2VsZWN0ZWQgcm93c1xyXG4gICAgICAgIGRlbGV0ZVNlbGVjdGVkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBTd2VldEFsZXJ0MiBwb3AgdXAgLS0tIG9mZmljaWFsIGRvY3MgcmVmZXJlbmNlOiBodHRwczovL3N3ZWV0YWxlcnQyLmdpdGh1Yi5pby9cclxuICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSBzZWxlY3RlZCBmaWxlcyBvciBmb2xkZXJzP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBkZWxldGUhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IGhhdmUgZGVsZXRlZCBhbGwgc2VsZWN0ZWQgIGZpbGVzIG9yIGZvbGRlcnMhLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInN1Y2Nlc3NcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBhbGwgc2VsZWN0ZWQgY3VzdG9tZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94ZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjLmNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhdGFibGUucm93KCQoYy5jbG9zZXN0KCd0Ym9keSB0cicpKSkucmVtb3ZlKCkuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBoZWFkZXIgY2hlY2tlZCBib3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyQ2hlY2tib3ggPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbdHlwZT1cImNoZWNrYm94XCJdJylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmRpc21pc3MgPT09ICdjYW5jZWwnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJTZWxlY3RlZCAgZmlsZXMgb3IgZm9sZGVycyB3YXMgbm90IGRlbGV0ZWQuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRvZ2dsZSB0b29sYmFyc1xyXG4gICAgY29uc3QgdG9nZ2xlVG9vbGJhcnMgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gRGVmaW5lIHZhcmlhYmxlc1xyXG4gICAgICAgIGNvbnN0IHRvb2xiYXJCYXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtZmlsZW1hbmFnZXItdGFibGUtdG9vbGJhcj1cImJhc2VcIl0nKTtcclxuICAgICAgICBjb25zdCB0b29sYmFyU2VsZWN0ZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1rdC1maWxlbWFuYWdlci10YWJsZS10b29sYmFyPVwic2VsZWN0ZWRcIl0nKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZENvdW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEta3QtZmlsZW1hbmFnZXItdGFibGUtc2VsZWN0PVwic2VsZWN0ZWRfY291bnRcIl0nKTtcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0IHJlZnJlc2hlZCBjaGVja2JveCBET00gZWxlbWVudHMgXHJcbiAgICAgICAgY29uc3QgYWxsQ2hlY2tib3hlcyA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Rib2R5IFt0eXBlPVwiY2hlY2tib3hcIl0nKTtcclxuXHJcbiAgICAgICAgLy8gRGV0ZWN0IGNoZWNrYm94ZXMgc3RhdGUgJiBjb3VudFxyXG4gICAgICAgIGxldCBjaGVja2VkU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG5cclxuICAgICAgICAvLyBDb3VudCBjaGVja2VkIGJveGVzXHJcbiAgICAgICAgYWxsQ2hlY2tib3hlcy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBUb2dnbGUgdG9vbGJhcnNcclxuICAgICAgICBpZiAoY2hlY2tlZFN0YXRlKSB7XHJcbiAgICAgICAgICAgIHNlbGVjdGVkQ291bnQuaW5uZXJIVE1MID0gY291bnQ7XHJcbiAgICAgICAgICAgIHRvb2xiYXJCYXNlLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICB0b29sYmFyU2VsZWN0ZWQuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdG9vbGJhckJhc2UuY2xhc3NMaXN0LnJlbW92ZSgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgIHRvb2xiYXJTZWxlY3RlZC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIG5ldyBmb2xkZXJcclxuICAgIGNvbnN0IGhhbmRsZU5ld0ZvbGRlciA9ICgpID0+IHtcclxuICAgICAgICAvLyBTZWxlY3QgYnV0dG9uXHJcbiAgICAgICAgY29uc3QgbmV3Rm9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2t0X2ZpbGVfbWFuYWdlcl9uZXdfZm9sZGVyJyk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBjbGljayBhY3Rpb25cclxuICAgICAgICBuZXdGb2xkZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gSWdub3JlIGlmIGlucHV0IGFscmVhZHkgZXhpc3RcclxuICAgICAgICAgICAgaWYgKHRhYmxlLnF1ZXJ5U2VsZWN0b3IoJyNrdF9maWxlX21hbmFnZXJfbmV3X2ZvbGRlcl9yb3cnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBZGQgbmV3IGJsYW5rIHJvdyB0byBkYXRhdGFibGVcclxuICAgICAgICAgICAgY29uc3QgdGFibGVCb2R5ID0gdGFibGUucXVlcnlTZWxlY3RvcigndGJvZHknKTtcclxuICAgICAgICAgICAgY29uc3Qgcm93RWxlbWVudCA9IHVwbG9hZFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTsgLy8gQ2xvbmUgdGVtcGxhdGUgbWFya3VwXHJcbiAgICAgICAgICAgIHRhYmxlQm9keS5wcmVwZW5kKHJvd0VsZW1lbnQpO1xyXG5cclxuICAgICAgICAgICAgLy8gRGVmaW5lIHRlbXBsYXRlIGludGVyYWN0aXZlIGVsZW1lbnRzXHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0Zvcm0gPSByb3dFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9maWxlX21hbmFnZXJfYWRkX2ZvbGRlcl9mb3JtJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd0J1dHRvbiA9IHJvd0VsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X2ZpbGVfbWFuYWdlcl9hZGRfZm9sZGVyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IHJvd0VsZW1lbnQucXVlcnlTZWxlY3RvcignI2t0X2ZpbGVfbWFuYWdlcl9jYW5jZWxfZm9sZGVyJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlckljb24gPSByb3dFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9maWxlX21hbmFnZXJfZm9sZGVyX2ljb24nKTtcclxuICAgICAgICAgICAgY29uc3Qgcm93SW5wdXQgPSByb3dFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwibmV3X2ZvbGRlcl9uYW1lXCJdJyk7XHJcblxyXG4gICAgICAgICAgICAvLyBEZWZpbmUgdmFsaWRhdG9yXHJcbiAgICAgICAgICAgIC8vIEluaXQgZm9ybSB2YWxpZGF0aW9uIHJ1bGVzLiBGb3IgbW9yZSBpbmZvIGNoZWNrIHRoZSBGb3JtVmFsaWRhdGlvbiBwbHVnaW4ncyBvZmZpY2lhbCBkb2N1bWVudGF0aW9uOmh0dHBzOi8vZm9ybXZhbGlkYXRpb24uaW8vXHJcbiAgICAgICAgICAgIHZhciB2YWxpZGF0b3IgPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcclxuICAgICAgICAgICAgICAgIHJvd0Zvcm0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXdfZm9sZGVyX25hbWUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RW1wdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZvbGRlciBuYW1lIGlzIHJlcXVpcmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib290c3RyYXA6IG5ldyBGb3JtVmFsaWRhdGlvbi5wbHVnaW5zLkJvb3RzdHJhcDUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZUludmFsaWRDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVWYWxpZENsYXNzOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhZGQgbmV3IGZvbGRlciBidXR0b25cclxuICAgICAgICAgICAgcm93QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWN0aXZhdGUgaW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICByb3dCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIiwgXCJvblwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBWYWxpZGF0ZSBmb3JtIGJlZm9yZSBzdWJtaXRcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlZCEnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gJ1ZhbGlkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgcHJvY2VzcyBmb3IgZGVtbyBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgZm9sZGVyIGxpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb2xkZXJMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvbGRlckxpbmtDbGFzc2VzID0gWyd0ZXh0LWdyYXktODAwJywgJ3RleHQtaG92ZXItcHJpbWFyeSddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbGRlckxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgJz9wYWdlPWFwcHMvZmlsZS1tYW5hZ2VyL2JsYW5rJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9sZGVyTGluay5jbGFzc0xpc3QuYWRkKC4uLmZvbGRlckxpbmtDbGFzc2VzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2xkZXJMaW5rLmlubmVyVGV4dCA9IHJvd0lucHV0LnZhbHVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSBkYXRhdGFibGUucm93LmFkZCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGVja2JveCc6IGNoZWNrYm94VGVtcGxhdGUuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IGZvbGRlckljb24ub3V0ZXJIVE1MICsgZm9sZGVyTGluay5vdXRlckhUTUwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVwiOiAnLScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0ZVwiOiAnLScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY3Rpb24nOiBhY3Rpb25UZW1wbGF0ZS5pbm5lckhUTUxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5ub2RlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChuZXdSb3cpLmZpbmQoJ3RkJykuZXEoNCkuYXR0cignZGF0YS1rdC1maWxlbWFuYWdlci10YWJsZScsICdhY3Rpb25fZHJvcGRvd24nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKG5ld1JvdykuZmluZCgndGQnKS5lcSg0KS5hZGRDbGFzcygndGV4dC1lbmQnKTsgLy8gQWRkIGN1c3RvbSBjbGFzcyB0byBsYXN0ICd0ZCcgZWxlbWVudCAtLS0gbW9yZSBpbmZvOiBodHRwczovL2RhdGF0YWJsZXMubmV0L2ZvcnVtcy9kaXNjdXNzaW9uLzIyMzQxL3Jvdy1hZGQtY2VsbC1jbGFzc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1zb3J0IGRhdGF0YWJsZSB0byBhbGxvdyBuZXcgZm9sZGVyIGFkZGVkIGF0IHRoZSB0b3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBkYXRhdGFibGUucm93KDApLmluZGV4KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NvdW50ID0gZGF0YXRhYmxlLmRhdGEoKS5sZW5ndGggLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZFJvdyA9IGRhdGF0YWJsZS5yb3cocm93Q291bnQpLmRhdGEoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFJvdztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHJvd0NvdW50OyBpID4gaW5kZXg7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUm93ID0gZGF0YXRhYmxlLnJvdyhpIC0gMSkuZGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhdGFibGUucm93KGkpLmRhdGEodGVtcFJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5yb3coaSAtIDEpLmRhdGEoaW5zZXJ0ZWRSb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xvc2VCdXR0b25cIjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWJ1Z1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZXdlc3RPblRvcFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm9ncmVzc0JhclwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3RyLXRvcC1yaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByZXZlbnREdXBsaWNhdGVzXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dEdXJhdGlvblwiOiBcIjMwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhpZGVEdXJhdGlvblwiOiBcIjEwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aW1lT3V0XCI6IFwiNTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImV4dGVuZGVkVGltZU91dFwiOiBcIjEwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93RWFzaW5nXCI6IFwic3dpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoaWRlRWFzaW5nXCI6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd01ldGhvZFwiOiBcImZhZGVJblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhpZGVNZXRob2RcIjogXCJmYWRlT3V0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2Vzcyhyb3dJbnB1dC52YWx1ZSArICcgd2FzIGNyZWF0ZWQhJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgaW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXNldCBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0lucHV0LnZhbHVlID0gJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5kcmF3KGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc2FibGUgaW5kaWNhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBIYW5kbGUgY2FuY2VsIG5ldyBmb2xkZXIgYnV0dG9uXHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFjdGl2YXRlIGluZGljYXRvclxyXG4gICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIsIFwib25cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBpbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSB0b2FzdHJcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjbG9zZUJ1dHRvblwiOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlYnVnXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5ld2VzdE9uVG9wXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb2dyZXNzQmFyXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInBvc2l0aW9uQ2xhc3NcIjogXCJ0b2FzdHItdG9wLXJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicHJldmVudER1cGxpY2F0ZXNcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2hvd0R1cmF0aW9uXCI6IFwiMzAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGlkZUR1cmF0aW9uXCI6IFwiMTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRpbWVPdXRcIjogXCI1MDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWRUaW1lT3V0XCI6IFwiMTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImhpZGVFYXNpbmdcIjogXCJsaW5lYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93TWV0aG9kXCI6IFwiZmFkZUluXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaGlkZU1ldGhvZFwiOiBcImZhZGVPdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcignQ2FuY2VsbGVkIG5ldyBmb2xkZXIgY3JlYXRpb24nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNldE5ld0ZvbGRlcigpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlc2V0IGFkZCBuZXcgZm9sZGVyIGlucHV0XHJcbiAgICBjb25zdCByZXNldE5ld0ZvbGRlciA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBuZXdGb2xkZXJSb3cgPSB0YWJsZS5xdWVyeVNlbGVjdG9yKCcja3RfZmlsZV9tYW5hZ2VyX25ld19mb2xkZXJfcm93Jyk7XHJcblxyXG4gICAgICAgIGlmIChuZXdGb2xkZXJSb3cpIHtcclxuICAgICAgICAgICAgbmV3Rm9sZGVyUm93LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobmV3Rm9sZGVyUm93KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSGFuZGxlIHJlbmFtZSBmaWxlIG9yIGZvbGRlclxyXG4gICAgY29uc3QgaGFuZGxlUmVuYW1lID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlbmFtZUJ1dHRvbiA9IHRhYmxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWt0LWZpbGVtYW5hZ2VyLXRhYmxlPVwicmVuYW1lXCJdJyk7ICAgICBcclxuXHJcbiAgICAgICAgcmVuYW1lQnV0dG9uLmZvckVhY2goYnV0dG9uID0+IHtcclxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmVuYW1lQ2FsbGJhY2spO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbmFtZSBjYWxsYmFja1xyXG4gICAgY29uc3QgcmVuYW1lQ2FsbGJhY2sgPSAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgLy8gRGVmaW5lIHNoYXJlZCB2YWx1ZVxyXG4gICAgICAgIGxldCBuYW1lVmFsdWU7XHJcblxyXG4gICAgICAgIC8vIFN0b3AgcmVuYW1pbmcgaWYgdGhlcmUncyBhbiBpbnB1dCBleGlzdGluZ1xyXG4gICAgICAgIGlmICh0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCcja3RfZmlsZV9tYW5hZ2VyX3JlbmFtZV9pbnB1dCcpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwiVW5zYXZlZCBpbnB1dCBkZXRlY3RlZC4gUGxlYXNlIHNhdmUgb3IgY2FuY2VsIHRoZSBjdXJyZW50IGl0ZW1cIixcclxuICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZWxlY3QgcGFyZW50IHJvd1xyXG4gICAgICAgIGNvbnN0IHBhcmVudCA9IGUudGFyZ2V0LmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG4gICAgICAgIC8vIEdldCBuYW1lIGNvbHVtblxyXG4gICAgICAgIGNvbnN0IG5hbWVDb2wgPSBwYXJlbnQucXVlcnlTZWxlY3RvckFsbCgndGQnKVsxXTtcclxuICAgICAgICBjb25zdCBjb2xJY29uID0gbmFtZUNvbC5xdWVyeVNlbGVjdG9yKCcuaWNvbi13cmFwcGVyJyk7XHJcbiAgICAgICAgbmFtZVZhbHVlID0gbmFtZUNvbC5pbm5lclRleHQ7XHJcblxyXG4gICAgICAgIC8vIFNldCByZW5hbWUgaW5wdXQgdGVtcGxhdGVcclxuICAgICAgICBjb25zdCByZW5hbWVJbnB1dCA9IHJlbmFtZVRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICByZW5hbWVJbnB1dC5xdWVyeVNlbGVjdG9yKCcja3RfZmlsZV9tYW5hZ2VyX3JlbmFtZV9mb2xkZXJfaWNvbicpLmlubmVySFRNTCA9IGNvbEljb24ub3V0ZXJIVE1MO1xyXG5cclxuICAgICAgICAvLyBTd2FwIGN1cnJlbnQgY29sdW1uIGNvbnRlbnQgd2l0aCBpbnB1dCB0ZW1wbGF0ZVxyXG4gICAgICAgIG5hbWVDb2wuaW5uZXJIVE1MID0gcmVuYW1lSW5wdXQuaW5uZXJIVE1MO1xyXG5cclxuICAgICAgICAvLyBTZXQgaW5wdXQgdmFsdWUgd2l0aCBjdXJyZW50IGZpbGUvZm9sZGVyIG5hbWVcclxuICAgICAgICBwYXJlbnQucXVlcnlTZWxlY3RvcignI2t0X2ZpbGVfbWFuYWdlcl9yZW5hbWVfaW5wdXQnKS52YWx1ZSA9IG5hbWVWYWx1ZTtcclxuXHJcbiAgICAgICAgLy8gUmVuYW1lIGZpbGUgLyBmb2xkZXIgdmFsaWRhdG9yXHJcbiAgICAgICAgdmFyIHJlbmFtZVZhbGlkYXRvciA9IEZvcm1WYWxpZGF0aW9uLmZvcm1WYWxpZGF0aW9uKFxyXG4gICAgICAgICAgICBuYW1lQ29sLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAncmVuYW1lX2ZvbGRlcl9uYW1lJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOYW1lIGlzIHJlcXVpcmVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuVHJpZ2dlcigpLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvb3RzdHJhcDogbmV3IEZvcm1WYWxpZGF0aW9uLnBsdWdpbnMuQm9vdHN0cmFwNSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NlbGVjdG9yOiAnLmZ2LXJvdycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZUludmFsaWRDbGFzczogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZVZhbGlkQ2xhc3M6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIC8vIFJlbmFtZSBpbnB1dCBidXR0b24gYWN0aW9uXHJcbiAgICAgICAgY29uc3QgcmVuYW1lSW5wdXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfZmlsZV9tYW5hZ2VyX3JlbmFtZV9mb2xkZXInKTtcclxuICAgICAgICByZW5hbWVJbnB1dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBEZXRlY3QgaWYgdmFsaWRcclxuICAgICAgICAgICAgaWYgKHJlbmFtZVZhbGlkYXRvcikge1xyXG4gICAgICAgICAgICAgICAgcmVuYW1lVmFsaWRhdG9yLnZhbGlkYXRlKCkudGhlbihmdW5jdGlvbiAoc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlZCEnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSAnVmFsaWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBvcCB1cCBjb25maXJtYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbmFtZSBcIiArIG5hbWVWYWx1ZSArIFwiP1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCByZW5hbWUgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCBjYW5jZWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tZGFuZ2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uOiBcImJ0biBmdy1ib2xkIGJ0bi1hY3RpdmUtbGlnaHQtcHJpbWFyeVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IGhhdmUgcmVuYW1lZCBcIiArIG5hbWVWYWx1ZSArIFwiIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzdWNjZXNzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGZ3LWJvbGQgYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXQgbmV3IGZpbGUgLyBmb2xkZXIgbmFtZSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9maWxlX21hbmFnZXJfcmVuYW1lX2lucHV0JykudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOZXcgY29sdW1uIGRhdGEgdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RGF0YSA9IGA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtjb2xJY29uLm91dGVySFRNTH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCI/cGFnZT1hcHBzL2ZpbGUtbWFuYWdlci9maWxlcy9cIiBjbGFzcz1cInRleHQtZ3JheS04MDAgdGV4dC1ob3Zlci1wcmltYXJ5XCI+JHtuZXdWYWx1ZX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEcmF3IGRhdGF0YWJsZSB3aXRoIG5ldyBjb250ZW50IC0tIEFkZCBtb3JlIGV2ZW50cyBoZXJlIGZvciBhbnkgc2VydmVyLXNpZGUgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGF0YWJsZS5jZWxsKCQobmFtZUNvbCkpLmRhdGEobmV3RGF0YSkuZHJhdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQuZGlzbWlzcyA9PT0gJ2NhbmNlbCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTd2FsLmZpcmUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBuYW1lVmFsdWUgKyBcIiB3YXMgbm90IHJlbmFtZWQuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJPaywgZ290IGl0IVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gZnctYm9sZCBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIENhbmNlbCByZW5hbWUgaW5wdXRcclxuICAgICAgICBjb25zdCBjYW5jZWxJbnB1dEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNrdF9maWxlX21hbmFnZXJfcmVuYW1lX2ZvbGRlcl9jYW5jZWwnKTtcclxuICAgICAgICBjYW5jZWxJbnB1dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBTaW11bGF0ZSBwcm9jZXNzIGZvciBkZW1vIG9ubHlcclxuICAgICAgICAgICAgY2FuY2VsSW5wdXRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIiwgXCJvblwiKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmV2ZXJ0VGVtcGxhdGUgPSBgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAke2NvbEljb24ub3V0ZXJIVE1MfVxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCI/cGFnZT1hcHBzL2ZpbGUtbWFuYWdlci9maWxlcy9cIiBjbGFzcz1cInRleHQtZ3JheS04MDAgdGV4dC1ob3Zlci1wcmltYXJ5XCI+JHtuYW1lVmFsdWV9PC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+YDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgc3Bpbm5lclxyXG4gICAgICAgICAgICAgICAgY2FuY2VsSW5wdXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRHJhdyBkYXRhdGFibGUgd2l0aCBuZXcgY29udGVudCAtLSBBZGQgbW9yZSBldmVudHMgaGVyZSBmb3IgYW55IHNlcnZlci1zaWRlIGV2ZW50c1xyXG4gICAgICAgICAgICAgICAgZGF0YXRhYmxlLmNlbGwoJChuYW1lQ29sKSkuZGF0YShyZXZlcnRUZW1wbGF0ZSkuZHJhdygpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRvZ2dsZSB0b2FzdHJcclxuICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xvc2VCdXR0b25cIjogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBcImRlYnVnXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIFwibmV3ZXN0T25Ub3BcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJwcm9ncmVzc0JhclwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBcInBvc2l0aW9uQ2xhc3NcIjogXCJ0b2FzdHItdG9wLXJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJwcmV2ZW50RHVwbGljYXRlc1wiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBcInNob3dEdXJhdGlvblwiOiBcIjMwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaGlkZUR1cmF0aW9uXCI6IFwiMTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwidGltZU91dFwiOiBcIjUwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcImV4dGVuZGVkVGltZU91dFwiOiBcIjEwMDBcIixcclxuICAgICAgICAgICAgICAgICAgICBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaGlkZUVhc2luZ1wiOiBcImxpbmVhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwic2hvd01ldGhvZFwiOiBcImZhZGVJblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiaGlkZU1ldGhvZFwiOiBcImZhZGVPdXRcIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoJ0NhbmNlbGxlZCByZW5hbWUgZnVuY3Rpb24nKTtcclxuICAgICAgICAgICAgfSwgMTAwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5pdCBkcm9wem9uZVxyXG4gICAgY29uc3QgaW5pdERyb3B6b25lID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIHNldCB0aGUgZHJvcHpvbmUgY29udGFpbmVyIGlkXHJcbiAgICAgICAgY29uc3QgaWQgPSBcIiNrdF9tb2RhbF91cGxvYWRfZHJvcHpvbmVcIjtcclxuICAgICAgICBjb25zdCBkcm9wem9uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaWQpO1xyXG5cclxuICAgICAgICAvLyBzZXQgdGhlIHByZXZpZXcgZWxlbWVudCB0ZW1wbGF0ZVxyXG4gICAgICAgIHZhciBwcmV2aWV3Tm9kZSA9IGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcHpvbmUtaXRlbVwiKTtcclxuICAgICAgICBwcmV2aWV3Tm9kZS5pZCA9IFwiXCI7XHJcbiAgICAgICAgdmFyIHByZXZpZXdUZW1wbGF0ZSA9IHByZXZpZXdOb2RlLnBhcmVudE5vZGUuaW5uZXJIVE1MO1xyXG4gICAgICAgIHByZXZpZXdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHJldmlld05vZGUpO1xyXG5cclxuICAgICAgICB2YXIgbXlEcm9wem9uZSA9IG5ldyBEcm9wem9uZShpZCwgeyAvLyBNYWtlIHRoZSB3aG9sZSBib2R5IGEgZHJvcHpvbmVcclxuICAgICAgICAgICAgdXJsOiBcInBhdGgvdG8veW91ci9zZXJ2ZXJcIiwgLy8gU2V0IHRoZSB1cmwgZm9yIHlvdXIgdXBsb2FkIHNjcmlwdCBsb2NhdGlvblxyXG4gICAgICAgICAgICBwYXJhbGxlbFVwbG9hZHM6IDEwLFxyXG4gICAgICAgICAgICBwcmV2aWV3VGVtcGxhdGU6IHByZXZpZXdUZW1wbGF0ZSxcclxuICAgICAgICAgICAgbWF4RmlsZXNpemU6IDEsIC8vIE1heCBmaWxlc2l6ZSBpbiBNQlxyXG4gICAgICAgICAgICBhdXRvUHJvY2Vzc1F1ZXVlOiBmYWxzZSwgLy8gU3RvcCBhdXRvIHVwbG9hZFxyXG4gICAgICAgICAgICBhdXRvUXVldWU6IGZhbHNlLCAvLyBNYWtlIHN1cmUgdGhlIGZpbGVzIGFyZW4ndCBxdWV1ZWQgdW50aWwgbWFudWFsbHkgYWRkZWRcclxuICAgICAgICAgICAgcHJldmlld3NDb250YWluZXI6IGlkICsgXCIgLmRyb3B6b25lLWl0ZW1zXCIsIC8vIERlZmluZSB0aGUgY29udGFpbmVyIHRvIGRpc3BsYXkgdGhlIHByZXZpZXdzXHJcbiAgICAgICAgICAgIGNsaWNrYWJsZTogaWQgKyBcIiAuZHJvcHpvbmUtc2VsZWN0XCIgLy8gRGVmaW5lIHRoZSBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgY2xpY2sgdHJpZ2dlciB0byBzZWxlY3QgZmlsZXMuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJhZGRlZGZpbGVcIiwgZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgLy8gSG9vayBlYWNoIHN0YXJ0IGJ1dHRvblxyXG4gICAgICAgICAgICBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoaWQgKyBcIiAuZHJvcHpvbmUtc3RhcnRcIikub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIG15RHJvcHpvbmUuZW5xdWV1ZUZpbGUoZmlsZSk7IC0tIGRlZmF1bHQgZHJvcHpvbmUgZnVuY3Rpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBQcm9jZXNzIHNpbXVsYXRpb24gZm9yIGRlbW8gb25seVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXIgPSBmaWxlLnByZXZpZXdFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKTtcclxuICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnN0eWxlLm9wYWNpdHkgPSBcIjFcIjtcclxuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IDE7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpZHRoID49IDEwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBteURyb3B6b25lLmVtaXQoXCJzdWNjZXNzXCIsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBteURyb3B6b25lLmVtaXQoXCJjb21wbGV0ZVwiLCBmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGgrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSB3aWR0aCArICclJztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAyMCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkcm9wem9uZUl0ZW1zID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lLWl0ZW0nKTtcclxuICAgICAgICAgICAgZHJvcHpvbmVJdGVtcy5mb3JFYWNoKGRyb3B6b25lSXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wem9uZUl0ZW0uc3R5bGUuZGlzcGxheSA9ICcnO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXVwbG9hZCcpLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG4gICAgICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtcmVtb3ZlLWFsbCcpLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIaWRlIHRoZSB0b3RhbCBwcm9ncmVzcyBiYXIgd2hlbiBub3RoaW5nJ3MgdXBsb2FkaW5nIGFueW1vcmVcclxuICAgICAgICBteURyb3B6b25lLm9uKFwiY29tcGxldGVcIiwgZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NCYXJzID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLmR6LWNvbXBsZXRlJyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXJzLmZvckVhY2gocHJvZ3Jlc3NCYXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnF1ZXJ5U2VsZWN0b3IoJy5wcm9ncmVzcy1iYXInKS5zdHlsZS5vcGFjaXR5ID0gXCIwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIucXVlcnlTZWxlY3RvcignLnByb2dyZXNzJykuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzQmFyLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS1zdGFydCcpLnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTZXR1cCB0aGUgYnV0dG9ucyBmb3IgYWxsIHRyYW5zZmVyc1xyXG4gICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcHpvbmUtdXBsb2FkXCIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyBteURyb3B6b25lLnByb2Nlc3NRdWV1ZSgpOyAtLS0gZGVmYXVsdCBkcm9wem9uZSBwcm9jZXNzXHJcblxyXG4gICAgICAgICAgICAvLyBQcm9jZXNzIHNpbXVsYXRpb24gZm9yIGRlbW8gb25seVxyXG4gICAgICAgICAgICBteURyb3B6b25lLmZpbGVzLmZvckVhY2goZmlsZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9ncmVzc0JhciA9IGZpbGUucHJldmlld0VsZW1lbnQucXVlcnlTZWxlY3RvcignLnByb2dyZXNzLWJhcicpO1xyXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NCYXIuc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gMTtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2lkdGggPj0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15RHJvcHpvbmUuZW1pdChcInN1Y2Nlc3NcIiwgZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG15RHJvcHpvbmUuZW1pdChcImNvbXBsZXRlXCIsIGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IHdpZHRoICsgJyUnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDIwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFNldHVwIHRoZSBidXR0b24gZm9yIHJlbW92ZSBhbGwgZmlsZXNcclxuICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKFwiLmRyb3B6b25lLXJlbW92ZS1hbGxcIikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkFyZSB5b3Ugc3VyZSB5b3Ugd291bGQgbGlrZSB0byByZW1vdmUgYWxsIGZpbGVzP1wiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogXCJ3YXJuaW5nXCIsXHJcbiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCByZW1vdmUgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcclxuICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbjogXCJidG4gYnRuLXByaW1hcnlcIixcclxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtdXBsb2FkJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3B6b25lLnF1ZXJ5U2VsZWN0b3IoJy5kcm9wem9uZS1yZW1vdmUtYWxsJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG15RHJvcHpvbmUucmVtb3ZlQWxsRmlsZXModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdC5kaXNtaXNzID09PSAnY2FuY2VsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBmaWxlcyB3YXMgbm90IHJlbW92ZWQhLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcImVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiT2ssIGdvdCBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE9uIGFsbCBmaWxlcyBjb21wbGV0ZWQgdXBsb2FkXHJcbiAgICAgICAgbXlEcm9wem9uZS5vbihcInF1ZXVlY29tcGxldGVcIiwgZnVuY3Rpb24gKHByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVwbG9hZEljb25zID0gZHJvcHpvbmUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lLXVwbG9hZCcpO1xyXG4gICAgICAgICAgICB1cGxvYWRJY29ucy5mb3JFYWNoKHVwbG9hZEljb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgdXBsb2FkSWNvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBPbiBhbGwgZmlsZXMgcmVtb3ZlZFxyXG4gICAgICAgIG15RHJvcHpvbmUub24oXCJyZW1vdmVkZmlsZVwiLCBmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgICAgICBpZiAobXlEcm9wem9uZS5maWxlcy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBkcm9wem9uZS5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUtdXBsb2FkJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgZHJvcHpvbmUucXVlcnlTZWxlY3RvcignLmRyb3B6b25lLXJlbW92ZS1hbGwnKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJbml0IGNvcHkgbGlua1xyXG4gICAgY29uc3QgaW5pdENvcHlMaW5rID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIFNlbGVjdCBhbGwgY29weSBsaW5rIGVsZW1lbnRzXHJcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1rdC1maWxlbWFuZ2VyLXRhYmxlPVwiY29weV9saW5rXCJdJyk7XHJcblxyXG4gICAgICAgIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICAvLyBEZWZpbmUgZWxlbWVudHNcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uID0gZWwucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGdlbmVyYXRvciA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWZpbGVtYW5nZXItdGFibGU9XCJjb3B5X2xpbmtfZ2VuZXJhdG9yXCJdJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWt0LWZpbGVtYW5nZXItdGFibGU9XCJjb3B5X2xpbmtfcmVzdWx0XCJdJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZWwucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENsaWNrIGFjdGlvblxyXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB0b2dnbGVcclxuICAgICAgICAgICAgICAgIGdlbmVyYXRvci5jbGFzc0xpc3QucmVtb3ZlKCdkLW5vbmUnKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdC5jbGFzc0xpc3QuYWRkKCdkLW5vbmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGlua1RpbWVvdXQ7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobGlua1RpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgbGlua1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0b3IuY2xhc3NMaXN0LmFkZCgnZC1ub25lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmNsYXNzTGlzdC5yZW1vdmUoJ2Qtbm9uZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNlbGVjdCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMjAwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBtb3ZlIHRvIGZvbGRlclxyXG4gICAgY29uc3QgaGFuZGxlTW92ZVRvRm9sZGVyID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfbW92ZV90b19mb2xkZXInKTtcclxuICAgICAgICBjb25zdCBmb3JtID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcja3RfbW9kYWxfbW92ZV90b19mb2xkZXJfZm9ybScpO1xyXG4gICAgICAgIGNvbnN0IHNhdmVCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNrdF9tb2RhbF9tb3ZlX3RvX2ZvbGRlcl9zdWJtaXQnKTtcclxuICAgICAgICBjb25zdCBtb3ZlTW9kYWwgPSBuZXcgYm9vdHN0cmFwLk1vZGFsKGVsZW1lbnQpO1xyXG5cclxuICAgICAgICAvLyBJbml0IGZvcm0gdmFsaWRhdGlvbiBydWxlcy4gRm9yIG1vcmUgaW5mbyBjaGVjayB0aGUgRm9ybVZhbGlkYXRpb24gcGx1Z2luJ3Mgb2ZmaWNpYWwgZG9jdW1lbnRhdGlvbjpodHRwczovL2Zvcm12YWxpZGF0aW9uLmlvL1xyXG4gICAgICAgIHZhciB2YWxpZGF0b3IgPSBGb3JtVmFsaWRhdGlvbi5mb3JtVmFsaWRhdGlvbihcclxuICAgICAgICAgICAgZm9ybSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgZmllbGRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ21vdmVfdG9fZm9sZGVyJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3JzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3RFbXB0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdQbGVhc2Ugc2VsZWN0IGEgZm9sZGVyLidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5UcmlnZ2VyKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm9vdHN0cmFwOiBuZXcgRm9ybVZhbGlkYXRpb24ucGx1Z2lucy5Cb290c3RyYXA1KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93U2VsZWN0b3I6ICcuZnYtcm93JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlSW52YWxpZENsYXNzOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlVmFsaWRDbGFzczogJydcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc2F2ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBzYXZlQnV0dG9uLnNldEF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIsIFwib25cIik7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3IudmFsaWRhdGUoKS50aGVuKGZ1bmN0aW9uIChzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVkIScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09ICdWYWxpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2ltdWxhdGUgcHJvY2VzcyBmb3IgZGVtbyBvbmx5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBcmUgeW91IHN1cmUgeW91IHdvdWxkIGxpa2UgdG8gbW92ZSB0byB0aGlzIGZvbGRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwid2FybmluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uc1N0eWxpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgbW92ZSBpdCFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIk5vLCByZXR1cm5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uOiBcImJ0biBidG4tcHJpbWFyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b246IFwiYnRuIGJ0bi1hY3RpdmUtbGlnaHRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuaXNDb25maXJtZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpOyAvLyBSZXNldCBmb3JtXHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92ZU1vZGFsLmhpZGUoKTsgLy8gSGlkZSBtb2RhbFx0XHRcdFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsb3NlQnV0dG9uXCI6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImRlYnVnXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuZXdlc3RPblRvcFwiOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvZ3Jlc3NCYXJcIjogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBvc2l0aW9uQ2xhc3NcIjogXCJ0b2FzdHItdG9wLXJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByZXZlbnREdXBsaWNhdGVzXCI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaG93RHVyYXRpb25cIjogXCIzMDBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGlkZUR1cmF0aW9uXCI6IFwiMTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aW1lT3V0XCI6IFwiNTAwMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJleHRlbmRlZFRpbWVPdXRcIjogXCIxMDAwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dFYXNpbmdcIjogXCJzd2luZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJoaWRlRWFzaW5nXCI6IFwibGluZWFyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNob3dNZXRob2RcIjogXCJmYWRlSW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaGlkZU1ldGhvZFwiOiBcImZhZGVPdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoJzEgaXRlbSBoYXMgYmVlbiBtb3ZlZC4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1rdC1pbmRpY2F0b3JcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91ciBhY3Rpb24gaGFzIGJlZW4gY2FuY2VsbGVkIS5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwiZXJyb3JcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnNTdHlsaW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk9rLCBnb3QgaXQhXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b246IFwiYnRuIGJ0bi1wcmltYXJ5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUJ1dHRvbi5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWt0LWluZGljYXRvclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlQnV0dG9uLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEta3QtaW5kaWNhdG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ291bnQgdG90YWwgbnVtYmVyIG9mIGl0ZW1zXHJcbiAgICBjb25zdCBjb3VudFRvdGFsSXRlbXMgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY291bnRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdrdF9maWxlX21hbmFnZXJfaXRlbXNfY291bnRlcicpO1xyXG5cclxuICAgICAgICAvLyBDb3VudCB0b3RhbCBudW1iZXIgb2YgZWxlbWVudHMgaW4gZGF0YXRhYmxlIC0tLSBtb3JlIGluZm86IGh0dHBzOi8vZGF0YXRhYmxlcy5uZXQvcmVmZXJlbmNlL2FwaS9jb3VudCgpXHJcbiAgICAgICAgY291bnRlci5pbm5lclRleHQgPSBkYXRhdGFibGUucm93cygpLmNvdW50KCkgKyAnIGl0ZW1zJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBQdWJsaWMgbWV0aG9kc1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2t0X2ZpbGVfbWFuYWdlcl9saXN0Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXRUZW1wbGF0ZXMoKTtcclxuICAgICAgICAgICAgaW5pdERhdGF0YWJsZSgpO1xyXG4gICAgICAgICAgICBpbml0VG9nZ2xlVG9vbGJhcigpO1xyXG4gICAgICAgICAgICBoYW5kbGVTZWFyY2hEYXRhdGFibGUoKTtcclxuICAgICAgICAgICAgaGFuZGxlRGVsZXRlUm93cygpO1xyXG4gICAgICAgICAgICBoYW5kbGVOZXdGb2xkZXIoKTtcclxuICAgICAgICAgICAgaW5pdERyb3B6b25lKCk7XHJcbiAgICAgICAgICAgIGluaXRDb3B5TGluaygpO1xyXG4gICAgICAgICAgICBoYW5kbGVSZW5hbWUoKTtcclxuICAgICAgICAgICAgaGFuZGxlTW92ZVRvRm9sZGVyKCk7XHJcbiAgICAgICAgICAgIGNvdW50VG90YWxJdGVtcygpO1xyXG4gICAgICAgICAgICBLVE1lbnUuY3JlYXRlSW5zdGFuY2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KCk7XHJcblxyXG4vLyBPbiBkb2N1bWVudCByZWFkeVxyXG5LVFV0aWwub25ET01Db250ZW50TG9hZGVkKGZ1bmN0aW9uICgpIHtcclxuICAgIEtURmlsZU1hbmFnZXJMaXN0LmluaXQoKTtcclxufSk7Il0sIm5hbWVzIjpbIktURmlsZU1hbmFnZXJMaXN0IiwiZGF0YXRhYmxlIiwidGFibGUiLCJ1cGxvYWRUZW1wbGF0ZSIsInJlbmFtZVRlbXBsYXRlIiwiYWN0aW9uVGVtcGxhdGUiLCJjaGVja2JveFRlbXBsYXRlIiwiaW5pdFRlbXBsYXRlcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImluaXREYXRhdGFibGUiLCJ0YWJsZVJvd3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInJvdyIsImRhdGVSb3ciLCJkYXRlQ29sIiwicmVhbERhdGUiLCJtb21lbnQiLCJpbm5lckhUTUwiLCJmb3JtYXQiLCJzZXRBdHRyaWJ1dGUiLCJmb2xkZXJzTGlzdE9wdGlvbnMiLCJkYXRhIiwiZW1wdHlUYWJsZSIsImNvbmNhdCIsImhvc3RVcmwiLCJmaWxlc0xpc3RPcHRpb25zIiwiY29uZGl0aW9uYWxQYWdpbmciLCJsb2FkT3B0aW9ucyIsImdldEF0dHJpYnV0ZSIsIiQiLCJEYXRhVGFibGUiLCJvbiIsImluaXRUb2dnbGVUb29sYmFyIiwiaGFuZGxlRGVsZXRlUm93cyIsInRvZ2dsZVRvb2xiYXJzIiwicmVzZXROZXdGb2xkZXIiLCJLVE1lbnUiLCJjcmVhdGVJbnN0YW5jZXMiLCJpbml0Q29weUxpbmsiLCJjb3VudFRvdGFsSXRlbXMiLCJoYW5kbGVSZW5hbWUiLCJoYW5kbGVTZWFyY2hEYXRhdGFibGUiLCJmaWx0ZXJTZWFyY2giLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInNlYXJjaCIsInRhcmdldCIsInZhbHVlIiwiZHJhdyIsImRlbGV0ZUJ1dHRvbnMiLCJkIiwicHJldmVudERlZmF1bHQiLCJwYXJlbnQiLCJjbG9zZXN0IiwiZmlsZU5hbWUiLCJpbm5lclRleHQiLCJTd2FsIiwiZmlyZSIsInRleHQiLCJpY29uIiwic2hvd0NhbmNlbEJ1dHRvbiIsImJ1dHRvbnNTdHlsaW5nIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwiY3VzdG9tQ2xhc3MiLCJjb25maXJtQnV0dG9uIiwiY2FuY2VsQnV0dG9uIiwidGhlbiIsInJlc3VsdCIsInJlbW92ZSIsImRpc21pc3MiLCJjdXN0b21lck5hbWUiLCJjaGVja2JveGVzIiwiZGVsZXRlU2VsZWN0ZWQiLCJjIiwiY29uc29sZSIsImxvZyIsInNldFRpbWVvdXQiLCJjaGVja2VkIiwiaGVhZGVyQ2hlY2tib3giLCJ0b29sYmFyQmFzZSIsInRvb2xiYXJTZWxlY3RlZCIsInNlbGVjdGVkQ291bnQiLCJhbGxDaGVja2JveGVzIiwiY2hlY2tlZFN0YXRlIiwiY291bnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJoYW5kbGVOZXdGb2xkZXIiLCJuZXdGb2xkZXIiLCJnZXRFbGVtZW50QnlJZCIsInRhYmxlQm9keSIsInJvd0VsZW1lbnQiLCJjbG9uZU5vZGUiLCJwcmVwZW5kIiwicm93Rm9ybSIsInJvd0J1dHRvbiIsImZvbGRlckljb24iLCJyb3dJbnB1dCIsInZhbGlkYXRvciIsIkZvcm1WYWxpZGF0aW9uIiwiZm9ybVZhbGlkYXRpb24iLCJmaWVsZHMiLCJ2YWxpZGF0b3JzIiwibm90RW1wdHkiLCJtZXNzYWdlIiwicGx1Z2lucyIsInRyaWdnZXIiLCJUcmlnZ2VyIiwiYm9vdHN0cmFwIiwiQm9vdHN0cmFwNSIsInJvd1NlbGVjdG9yIiwiZWxlSW52YWxpZENsYXNzIiwiZWxlVmFsaWRDbGFzcyIsInZhbGlkYXRlIiwic3RhdHVzIiwiX2ZvbGRlckxpbmskY2xhc3NMaXN0IiwiZm9sZGVyTGluayIsImNyZWF0ZUVsZW1lbnQiLCJmb2xkZXJMaW5rQ2xhc3NlcyIsImFwcGx5IiwibmV3Um93Iiwib3V0ZXJIVE1MIiwibm9kZSIsImZpbmQiLCJlcSIsImF0dHIiLCJhZGRDbGFzcyIsImluZGV4Iiwicm93Q291bnQiLCJsZW5ndGgiLCJpbnNlcnRlZFJvdyIsInRlbXBSb3ciLCJpIiwidG9hc3RyIiwib3B0aW9ucyIsInN1Y2Nlc3MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJlcnJvciIsIm5ld0ZvbGRlclJvdyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbmFtZUJ1dHRvbiIsImJ1dHRvbiIsInJlbmFtZUNhbGxiYWNrIiwibmFtZVZhbHVlIiwibmFtZUNvbCIsImNvbEljb24iLCJyZW5hbWVJbnB1dCIsInJlbmFtZVZhbGlkYXRvciIsInJlbmFtZUlucHV0QnV0dG9uIiwibmV3VmFsdWUiLCJuZXdEYXRhIiwiY2VsbCIsImNhbmNlbElucHV0QnV0dG9uIiwicmV2ZXJ0VGVtcGxhdGUiLCJpbml0RHJvcHpvbmUiLCJpZCIsImRyb3B6b25lIiwicHJldmlld05vZGUiLCJwcmV2aWV3VGVtcGxhdGUiLCJteURyb3B6b25lIiwiRHJvcHpvbmUiLCJ1cmwiLCJwYXJhbGxlbFVwbG9hZHMiLCJtYXhGaWxlc2l6ZSIsImF1dG9Qcm9jZXNzUXVldWUiLCJhdXRvUXVldWUiLCJwcmV2aWV3c0NvbnRhaW5lciIsImNsaWNrYWJsZSIsImZpbGUiLCJwcmV2aWV3RWxlbWVudCIsIm9uY2xpY2siLCJwcm9ncmVzc0JhciIsInN0eWxlIiwib3BhY2l0eSIsIndpZHRoIiwidGltZXIiLCJzZXRJbnRlcnZhbCIsImVtaXQiLCJjbGVhckludGVydmFsIiwiZHJvcHpvbmVJdGVtcyIsImRyb3B6b25lSXRlbSIsImRpc3BsYXkiLCJwcm9ncmVzc0JhcnMiLCJmaWxlcyIsInJlbW92ZUFsbEZpbGVzIiwicHJvZ3Jlc3MiLCJ1cGxvYWRJY29ucyIsInVwbG9hZEljb24iLCJlbGVtZW50cyIsImVsIiwiZ2VuZXJhdG9yIiwiaW5wdXQiLCJsaW5rVGltZW91dCIsImNsZWFyVGltZW91dCIsInNlbGVjdCIsImhhbmRsZU1vdmVUb0ZvbGRlciIsImVsZW1lbnQiLCJmb3JtIiwic2F2ZUJ1dHRvbiIsIm1vdmVNb2RhbCIsIk1vZGFsIiwiaXNDb25maXJtZWQiLCJyZXNldCIsImhpZGUiLCJjb3VudGVyIiwicm93cyIsImluaXQiLCJLVFV0aWwiLCJvbkRPTUNvbnRlbnRMb2FkZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/core/js/custom/apps/file-manager/list.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/assets/core/js/custom/apps/file-manager/list.js"]();
/******/
/******/ })()
;
